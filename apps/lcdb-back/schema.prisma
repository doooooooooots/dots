// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Action {
  id                String    @id @default(cuid())
  name              String    @default("")
  description       String    @default("")
  action_status     String    @default("")
  result            String    @default("")
  startTime         DateTime?
  endTime           DateTime?
  expectedStartTime DateTime?
  expectedEndTime   DateTime?
  agent             Person?   @relation("Action_agent", fields: [agentId], references: [id])
  agentId           String?   @map("agent")
  comments          Comment[] @relation("Action_comments")
  ratings           Rating[]  @relation("Action_ratings")

  @@index([agentId])
}

model Article {
  id                      String                  @id @default(cuid())
  status                  String                  @default("")
  product                 Product?                @relation("Article_product", fields: [productId], references: [id])
  productId               String?                 @map("product")
  condition               Condition?              @relation("Article_condition", fields: [conditionId], references: [id])
  conditionId             String?                 @map("condition")
  language                Language?               @relation("Article_language", fields: [languageId], references: [id])
  languageId              String?                 @map("language")
  priceSuggested          Price[]                 @relation("Article_priceSuggested")
  stockUnits              StockUnit[]             @relation("StockUnit_article")
  reconciliations         ArticleReconciliation[] @relation("ArticleReconciliation_articleId")
  updatedAt               DateTime?               @default(now()) @updatedAt
  updatedBy               Person?                 @relation("Article_updatedBy", fields: [updatedById], references: [id])
  updatedById             String?                 @map("updatedBy")
  isSigned                Boolean                 @default(false)
  isFirstEd               Boolean                 @default(false)
  isAltered               Boolean                 @default(false)
  isFoil                  Boolean                 @default(false)
  isReverseHolo           Boolean                 @default(false)
  isPlayset               Boolean                 @default(false)
  from_BatchProd_articles BatchProd[]             @relation("BatchProd_articles")

  @@index([productId])
  @@index([conditionId])
  @@index([languageId])
  @@index([updatedById])
}

model ArticleReconciliation {
  id          String     @id @default(cuid())
  plateform   Plateform? @relation("ArticleReconciliation_plateform", fields: [plateformId], references: [id])
  plateformId String?    @map("plateform")
  articleId   Article?   @relation("ArticleReconciliation_articleId", fields: [articleIdId], references: [id])
  articleIdId String?    @map("articleId")
  localPid    String     @default("")

  @@index([plateformId])
  @@index([articleIdId])
}

model Batch {
  id             String    @id @default(cuid())
  condition      String    @default("")
  expansion      String    @default("")
  time           Int?
  article_number Int?
  createdAt      DateTime?
  updatedAt      DateTime?
  operator       Person?   @relation("Batch_operator", fields: [operatorId], references: [id])
  operatorId     String?   @map("operator")

  @@index([operatorId])
}

model BatchProd {
  id       String    @id @default(cuid())
  name     String    @default("")
  articles Article[] @relation("BatchProd_articles")
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique @default("")
  products Product[] @relation("Product_category")
  idMkm    String    @unique @default("")
}

model Comment {
  id                          String          @id @default(cuid())
  text                        String          @default("")
  from_Action_comments        Action[]        @relation("Action_comments")
  from_ControlAction_comments ControlAction[] @relation("ControlAction_comments")
}

model Condition {
  id       String    @id @default(cuid())
  name     String    @default("")
  value    Int?      @unique
  code     String    @unique @default("")
  articles Article[] @relation("Article_condition")
}

model ControlAction {
  id                  String    @id @default(cuid())
  name                String    @default("")
  description         String    @default("")
  action_status       String    @default("")
  result              String    @default("")
  start_time          DateTime?
  end_time            DateTime?
  expected_start_time DateTime?
  expected_end_time   DateTime?
  agent               Person?   @relation("ControlAction_agent", fields: [agentId], references: [id])
  agentId             String?   @map("agent")
  targetStorage       Storage?  @relation("ControlAction_targetStorage", fields: [targetStorageId], references: [id])
  targetStorageId     String?   @map("targetStorage")
  comments            Comment[] @relation("ControlAction_comments")

  @@index([agentId])
  @@index([targetStorageId])
}

model Country {
  id                          String         @id @default(cuid())
  name                        String         @unique @default("")
  native                      String         @default("")
  code                        String         @unique @default("")
  phone                       Int?
  capital                     String         @default("")
  currencies                  Currency[]     @relation("Country_currencies")
  languages                   Language[]     @relation("Country_languages")
  emoji                       String         @default("")
  emojiU                      String         @default("")
  from_CountryGroup_countries CountryGroup[] @relation("CountryGroup_countries")
  from_Pricing_countries      Pricing[]      @relation("Pricing_countries")
}

model CountryGroup {
  id                 String    @id @default(cuid())
  code               String    @default("")
  name               String    @default("")
  countries          Country[] @relation("CountryGroup_countries")
  from_Pricing_zones Pricing[] @relation("Pricing_zones")
}

model Currency {
  id                       String       @id @default(cuid())
  name                     String       @default("")
  namePlural               String       @default("")
  code                     String       @unique @default("")
  symbol                   String       @default("")
  symbolNative             String       @default("")
  decimalDigits            Int?
  countries                Country[]    @relation("Country_currencies")
  from_Price_currency      Price[]      @relation("Price_currency")
  from_PriceOffer_currency PriceOffer[] @relation("PriceOffer_currency")
}

model Expansion {
  id                String                    @id @default(cuid())
  abbreviation      String                    @default("")
  slug              String                    @default("")
  icon              String                    @default("")
  dateRelease       DateTime?
  isReleased        Boolean                   @default(false)
  areProductsLoaded Boolean                   @default(false)
  game              Game?                     @relation("Expansion_game", fields: [gameId], references: [id])
  gameId            String?                   @map("game")
  products          Product[]                 @relation("Product_expansion")
  storages          Storage[]                 @relation("Expansion_storages")
  locals            ExpansionLocal[]          @relation("ExpansionLocal_expansion")
  reconciliations   ExpansionReconciliation[] @relation("ExpansionReconciliation_expansionId")
  updatedAt         DateTime?                 @updatedAt

  @@index([gameId])
}

model ExpansionLocal {
  id          String     @id @default(cuid())
  name        String     @default("")
  imageToken  String     @default("")
  language    Language?  @relation("ExpansionLocal_language", fields: [languageId], references: [id])
  languageId  String?    @map("language")
  expansion   Expansion? @relation("ExpansionLocal_expansion", fields: [expansionId], references: [id])
  expansionId String?    @map("expansion")

  @@index([languageId])
  @@index([expansionId])
}

model ExpansionReconciliation {
  id            String     @id @default(cuid())
  plateform     Plateform? @relation("ExpansionReconciliation_plateform", fields: [plateformId], references: [id])
  plateformId   String?    @map("plateform")
  expansionId   Expansion? @relation("ExpansionReconciliation_expansionId", fields: [expansionIdId], references: [id])
  expansionIdId String?    @map("expansionId")
  localPid      String     @default("")

  @@index([plateformId])
  @@index([expansionIdId])
}

model Game {
  id                String         @id @default(cuid())
  name              String         @default("")
  code              String         @unique @default("")
  productModels     ProductModel[] @relation("ProductModel_game")
  expansions        Expansion[]    @relation("Expansion_game")
  idMkm             String         @unique @default("")
  from_Storage_game Storage[]      @relation("Storage_game")
}

model Language {
  id                           String           @id @default(cuid())
  name                         String           @default("")
  code                         String           @unique @default("")
  native                       String           @default("")
  rtl                          Boolean          @default(false)
  idMkm                        String           @default("")
  from_Article_language        Article[]        @relation("Article_language")
  from_Country_languages       Country[]        @relation("Country_languages")
  from_ExpansionLocal_language ExpansionLocal[] @relation("ExpansionLocal_language")
  from_ProductLocal_language   ProductLocal[]   @relation("ProductLocal_language")

  @@index([idMkm])
}

model Link {
  id                         String        @id @default(cuid())
  targetId                   String        @default("")
  targetType                 String        @default("")
  targetField                String        @default("")
  from_MediaObject_backlinks MediaObject[] @relation("MediaObject_backlinks")
  from_Product_links         Product[]     @relation("Product_links")
}

model MediaObject {
  id                      String         @id @default(cuid())
  typeOf                  String         @default("")
  extension               String         @default("")
  name                    String         @default("")
  description             String         @default("")
  alt                     String         @default("")
  url                     String         @default("")
  backlinks               Link[]         @relation("MediaObject_backlinks")
  from_Product_image      Product[]      @relation("Product_image")
  from_ProductLocal_image ProductLocal[] @relation("ProductLocal_image")
}

model Offer {
  id               String       @id @default(cuid())
  pid              String       @default("")
  status           String       @default("")
  prices           PriceOffer[] @relation("PriceOffer_offer")
  eligibleQuantity Int?
  stockUnit        StockUnit?   @relation("Offer_stockUnit", fields: [stockUnitId], references: [id])
  stockUnitId      String?      @map("stockUnit")
  plateform        Plateform?   @relation("Offer_plateform", fields: [plateformId], references: [id])
  plateformId      String?      @map("plateform")
  createdAt        DateTime?    @default(now()) @updatedAt
  createdBy        Person?      @relation("Offer_createdBy", fields: [createdById], references: [id])
  createdById      String?      @map("createdBy")

  @@index([stockUnitId])
  @@index([plateformId])
  @@index([createdById])
}

model Person {
  id                               String              @id @default(cuid())
  pid                              String              @default("")
  familyName                       String              @default("")
  givenName                        String              @default("")
  email                            String              @default("")
  account                          User?               @relation("Person_account", fields: [accountId], references: [id])
  accountId                        String?             @unique @map("account")
  ratings                          Rating[]            @relation("Rating_author")
  actions                          Action[]            @relation("Action_agent")
  from_Article_updatedBy           Article[]           @relation("Article_updatedBy")
  from_Batch_operator              Batch[]             @relation("Batch_operator")
  from_ControlAction_agent         ControlAction[]     @relation("ControlAction_agent")
  from_Offer_createdBy             Offer[]             @relation("Offer_createdBy")
  from_Price_createdBy             Price[]             @relation("Price_createdBy")
  from_PriceOffer_createdBy        PriceOffer[]        @relation("PriceOffer_createdBy")
  from_StockUnitQuantity_createdBy StockUnitQuantity[] @relation("StockUnitQuantity_createdBy")
  from_Storage_createdBy           Storage[]           @relation("Storage_createdBy")

  @@index([pid])
}

model Plateform {
  id         String                    @id @default(cuid())
  pid        String                    @unique @default("")
  name       String                    @default("")
  products   ProductReconciliation[]   @relation("ProductReconciliation_plateform")
  articles   ArticleReconciliation[]   @relation("ArticleReconciliation_plateform")
  expansions ExpansionReconciliation[] @relation("ExpansionReconciliation_plateform")
  offers     Offer[]                   @relation("Offer_plateform")
}

model Price {
  id                          String    @id @default(cuid())
  value                       Float?
  currency                    Currency? @relation("Price_currency", fields: [currencyId], references: [id])
  currencyId                  String?   @map("currency")
  createdAt                   DateTime? @default(now()) @updatedAt
  createdBy                   Person?   @relation("Price_createdBy", fields: [createdById], references: [id])
  createdById                 String?   @map("createdBy")
  from_Article_priceSuggested Article[] @relation("Article_priceSuggested")
  from_Pricing_prices         Pricing[] @relation("Pricing_prices")

  @@index([currencyId])
  @@index([createdById])
}

model PriceOffer {
  id          String    @id @default(cuid())
  value       Float?
  currency    Currency? @relation("PriceOffer_currency", fields: [currencyId], references: [id])
  currencyId  String?   @map("currency")
  offer       Offer?    @relation("PriceOffer_offer", fields: [offerId], references: [id])
  offerId     String?   @map("offer")
  createdAt   DateTime? @default(now()) @updatedAt
  createdBy   Person?   @relation("PriceOffer_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([currencyId])
  @@index([offerId])
  @@index([createdById])
}

model Pricing {
  id        String         @id @default(cuid())
  prices    Price[]        @relation("Pricing_prices")
  countries Country[]      @relation("Pricing_countries")
  zones     CountryGroup[] @relation("Pricing_zones")
}

model Product {
  id              String                  @id @default(cuid())
  status          String                  @default("")
  number          String                  @default("")
  website         String                  @default("")
  locals          ProductLocal[]          @relation("Product_locals")
  countSells      Int?
  priceStrategy   Int?
  image           MediaObject?            @relation("Product_image", fields: [imageId], references: [id])
  imageId         String?                 @map("image")
  links           Link[]                  @relation("Product_links")
  articles        Article[]               @relation("Article_product")
  expansion       Expansion?              @relation("Product_expansion", fields: [expansionId], references: [id])
  expansionId     String?                 @map("expansion")
  productModel    ProductModel?           @relation("Product_productModel", fields: [productModelId], references: [id])
  productModelId  String?                 @map("productModel")
  category        Category?               @relation("Product_category", fields: [categoryId], references: [id])
  categoryId      String?                 @map("category")
  rarity          Rarity?                 @relation("Product_rarity", fields: [rarityId], references: [id])
  rarityId        String?                 @map("rarity")
  reconciliations ProductReconciliation[] @relation("ProductReconciliation_productId")

  @@index([imageId])
  @@index([expansionId])
  @@index([productModelId])
  @@index([categoryId])
  @@index([rarityId])
}

model ProductLocal {
  id                  String       @id @default(cuid())
  language            Language?    @relation("ProductLocal_language", fields: [languageId], references: [id])
  languageId          String?      @map("language")
  name                String       @default("")
  image               MediaObject? @relation("ProductLocal_image", fields: [imageId], references: [id])
  imageId             String?      @map("image")
  from_Product_locals Product[]    @relation("Product_locals")

  @@index([languageId])
  @@index([imageId])
}

model ProductModel {
  id       String    @id @default(cuid())
  name     String    @default("")
  products Product[] @relation("Product_productModel")
  game     Game?     @relation("ProductModel_game", fields: [gameId], references: [id])
  gameId   String?   @map("game")
  idMkm    String    @unique @default("")

  @@index([gameId])
}

model ProductReconciliation {
  id          String     @id @default(cuid())
  plateform   Plateform? @relation("ProductReconciliation_plateform", fields: [plateformId], references: [id])
  plateformId String?    @map("plateform")
  productId   Product?   @relation("ProductReconciliation_productId", fields: [productIdId], references: [id])
  productIdId String?    @map("productId")
  localPid    String     @default("")

  @@index([plateformId])
  @@index([productIdId])
}

model StockUnitQuantity {
  id          String     @id @default(cuid())
  value       Int?
  stockUnit   StockUnit? @relation("StockUnitQuantity_stockUnit", fields: [stockUnitId], references: [id])
  stockUnitId String?    @map("stockUnit")
  createdAt   DateTime?  @default(now()) @updatedAt
  createdBy   Person?    @relation("StockUnitQuantity_createdBy", fields: [createdById], references: [id])
  createdById String?    @map("createdBy")

  @@index([stockUnitId])
  @@index([createdById])
}

model Rarity {
  id       String    @id @default(cuid())
  name     String    @unique @default("")
  value    Int?      @unique
  group    Int?
  products Product[] @relation("Product_rarity")
}

model Rating {
  id                  String   @id @default(cuid())
  value               Int?
  author              Person?  @relation("Rating_author", fields: [authorId], references: [id])
  authorId            String?  @map("author")
  from_Action_ratings Action[] @relation("Action_ratings")

  @@index([authorId])
}

model StockUnit {
  id                 String              @id @default(cuid())
  quantity           Int?                @default(0)
  quantityVariations StockUnitQuantity[] @relation("StockUnitQuantity_stockUnit")
  article            Article?            @relation("StockUnit_article", fields: [articleId], references: [id])
  articleId          String?             @map("article")
  storage            Storage?            @relation("StockUnit_storage", fields: [storageId], references: [id])
  storageId          String?             @map("storage")
  offers             Offer[]             @relation("Offer_stockUnit")

  @@index([articleId])
  @@index([storageId])
}

model Storage {
  id                               String          @id @default(cuid())
  name                             String          @unique @default("")
  game                             Game?           @relation("Storage_game", fields: [gameId], references: [id])
  gameId                           String?         @map("game")
  stockUnits                       StockUnit[]     @relation("StockUnit_storage")
  expansions                       Expansion[]     @relation("Expansion_storages")
  createdAt                        DateTime?       @default(now()) @updatedAt
  createdBy                        Person?         @relation("Storage_createdBy", fields: [createdById], references: [id])
  createdById                      String?         @map("createdBy")
  from_ControlAction_targetStorage ControlAction[] @relation("ControlAction_targetStorage")

  @@index([gameId])
  @@index([createdById])
}

model User {
  id       String  @id @default(cuid())
  name     String  @default("")
  email    String  @unique @default("")
  password String
  profile  Person? @relation("Person_account")
}