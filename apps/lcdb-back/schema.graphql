# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Action {
  id: ID!
  name: String
  description: String
  action_status: String
  result: String
  startTime: DateTime
  endTime: DateTime
  expectedStartTime: DateTime
  expectedEndTime: DateTime
  agent: Person
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  ratings(
    where: RatingWhereInput! = {}
    orderBy: [RatingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rating!]
  ratingsCount(where: RatingWhereInput! = {}): Int
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ActionWhereUniqueInput {
  id: ID
}

input ActionWhereInput {
  AND: [ActionWhereInput!]
  OR: [ActionWhereInput!]
  NOT: [ActionWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  action_status: StringFilter
  result: StringFilter
  startTime: DateTimeNullableFilter
  endTime: DateTimeNullableFilter
  expectedStartTime: DateTimeNullableFilter
  expectedEndTime: DateTimeNullableFilter
  agent: PersonWhereInput
  comments: CommentManyRelationFilter
  ratings: RatingManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input CommentManyRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input RatingManyRelationFilter {
  every: RatingWhereInput
  some: RatingWhereInput
  none: RatingWhereInput
}

input ActionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  action_status: OrderDirection
  result: OrderDirection
  startTime: OrderDirection
  endTime: OrderDirection
  expectedStartTime: OrderDirection
  expectedEndTime: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ActionUpdateInput {
  name: String
  description: String
  action_status: String
  result: String
  startTime: DateTime
  endTime: DateTime
  expectedStartTime: DateTime
  expectedEndTime: DateTime
  agent: PersonRelateToOneForUpdateInput
  comments: CommentRelateToManyForUpdateInput
  ratings: RatingRelateToManyForUpdateInput
}

input PersonRelateToOneForUpdateInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
}

input CommentRelateToManyForUpdateInput {
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input RatingRelateToManyForUpdateInput {
  disconnect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  create: [RatingCreateInput!]
  connect: [RatingWhereUniqueInput!]
}

input ActionUpdateArgs {
  where: ActionWhereUniqueInput!
  data: ActionUpdateInput!
}

input ActionCreateInput {
  name: String
  description: String
  action_status: String
  result: String
  startTime: DateTime
  endTime: DateTime
  expectedStartTime: DateTime
  expectedEndTime: DateTime
  agent: PersonRelateToOneForCreateInput
  comments: CommentRelateToManyForCreateInput
  ratings: RatingRelateToManyForCreateInput
}

input PersonRelateToOneForCreateInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
}

input CommentRelateToManyForCreateInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input RatingRelateToManyForCreateInput {
  create: [RatingCreateInput!]
  connect: [RatingWhereUniqueInput!]
}

type Article {
  id: ID!
  status: String
  product: Product
  condition: Condition
  language: Language
  priceSuggested(
    where: PriceWhereInput! = {}
    orderBy: [PriceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Price!]
  priceSuggestedCount(where: PriceWhereInput! = {}): Int
  stockUnits(
    where: StockUnitWhereInput! = {}
    orderBy: [StockUnitOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StockUnit!]
  stockUnitsCount(where: StockUnitWhereInput! = {}): Int
  reconciliations(
    where: ArticleReconciliationWhereInput! = {}
    orderBy: [ArticleReconciliationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ArticleReconciliation!]
  reconciliationsCount(where: ArticleReconciliationWhereInput! = {}): Int
  updatedAt: DateTime
  updatedBy: Person
  isSigned: Boolean
  isFirstEd: Boolean
  isAltered: Boolean
  isFoil: Boolean
  isReverseHolo: Boolean
  isPlayset: Boolean
  aggregateCount(something: Int): Int
}

input ArticleWhereUniqueInput {
  id: ID
}

input ArticleWhereInput {
  AND: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  NOT: [ArticleWhereInput!]
  id: IDFilter
  status: StringFilter
  product: ProductWhereInput
  condition: ConditionWhereInput
  language: LanguageWhereInput
  priceSuggested: PriceManyRelationFilter
  stockUnits: StockUnitManyRelationFilter
  reconciliations: ArticleReconciliationManyRelationFilter
  updatedAt: DateTimeNullableFilter
  updatedBy: PersonWhereInput
  isSigned: BooleanFilter
  isFirstEd: BooleanFilter
  isAltered: BooleanFilter
  isFoil: BooleanFilter
  isReverseHolo: BooleanFilter
  isPlayset: BooleanFilter
}

input PriceManyRelationFilter {
  every: PriceWhereInput
  some: PriceWhereInput
  none: PriceWhereInput
}

input StockUnitManyRelationFilter {
  every: StockUnitWhereInput
  some: StockUnitWhereInput
  none: StockUnitWhereInput
}

input ArticleReconciliationManyRelationFilter {
  every: ArticleReconciliationWhereInput
  some: ArticleReconciliationWhereInput
  none: ArticleReconciliationWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ArticleOrderByInput {
  id: OrderDirection
  status: OrderDirection
  updatedAt: OrderDirection
  isSigned: OrderDirection
  isFirstEd: OrderDirection
  isAltered: OrderDirection
  isFoil: OrderDirection
  isReverseHolo: OrderDirection
  isPlayset: OrderDirection
}

input ArticleUpdateInput {
  status: String
  product: ProductRelateToOneForUpdateInput
  condition: ConditionRelateToOneForUpdateInput
  language: LanguageRelateToOneForUpdateInput
  priceSuggested: PriceRelateToManyForUpdateInput
  stockUnits: StockUnitRelateToManyForUpdateInput
  reconciliations: ArticleReconciliationRelateToManyForUpdateInput
  updatedAt: DateTime
  updatedBy: PersonRelateToOneForUpdateInput
  isSigned: Boolean
  isFirstEd: Boolean
  isAltered: Boolean
  isFoil: Boolean
  isReverseHolo: Boolean
  isPlayset: Boolean
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input ConditionRelateToOneForUpdateInput {
  create: ConditionCreateInput
  connect: ConditionWhereUniqueInput
  disconnect: Boolean
}

input LanguageRelateToOneForUpdateInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
  disconnect: Boolean
}

input PriceRelateToManyForUpdateInput {
  disconnect: [PriceWhereUniqueInput!]
  set: [PriceWhereUniqueInput!]
  create: [PriceCreateInput!]
  connect: [PriceWhereUniqueInput!]
}

input StockUnitRelateToManyForUpdateInput {
  disconnect: [StockUnitWhereUniqueInput!]
  set: [StockUnitWhereUniqueInput!]
  create: [StockUnitCreateInput!]
  connect: [StockUnitWhereUniqueInput!]
}

input ArticleReconciliationRelateToManyForUpdateInput {
  disconnect: [ArticleReconciliationWhereUniqueInput!]
  set: [ArticleReconciliationWhereUniqueInput!]
  create: [ArticleReconciliationCreateInput!]
  connect: [ArticleReconciliationWhereUniqueInput!]
}

input ArticleUpdateArgs {
  where: ArticleWhereUniqueInput!
  data: ArticleUpdateInput!
}

input ArticleCreateInput {
  status: String
  product: ProductRelateToOneForCreateInput
  condition: ConditionRelateToOneForCreateInput
  language: LanguageRelateToOneForCreateInput
  priceSuggested: PriceRelateToManyForCreateInput
  stockUnits: StockUnitRelateToManyForCreateInput
  reconciliations: ArticleReconciliationRelateToManyForCreateInput
  updatedAt: DateTime
  updatedBy: PersonRelateToOneForCreateInput
  isSigned: Boolean
  isFirstEd: Boolean
  isAltered: Boolean
  isFoil: Boolean
  isReverseHolo: Boolean
  isPlayset: Boolean
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ConditionRelateToOneForCreateInput {
  create: ConditionCreateInput
  connect: ConditionWhereUniqueInput
}

input LanguageRelateToOneForCreateInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
}

input PriceRelateToManyForCreateInput {
  create: [PriceCreateInput!]
  connect: [PriceWhereUniqueInput!]
}

input StockUnitRelateToManyForCreateInput {
  create: [StockUnitCreateInput!]
  connect: [StockUnitWhereUniqueInput!]
}

input ArticleReconciliationRelateToManyForCreateInput {
  create: [ArticleReconciliationCreateInput!]
  connect: [ArticleReconciliationWhereUniqueInput!]
}

type ArticleReconciliation {
  id: ID!
  plateform: Plateform
  articleId: Article
  localPid: String
}

input ArticleReconciliationWhereUniqueInput {
  id: ID
}

input ArticleReconciliationWhereInput {
  AND: [ArticleReconciliationWhereInput!]
  OR: [ArticleReconciliationWhereInput!]
  NOT: [ArticleReconciliationWhereInput!]
  id: IDFilter
  plateform: PlateformWhereInput
  articleId: ArticleWhereInput
  localPid: StringFilter
}

input ArticleReconciliationOrderByInput {
  id: OrderDirection
  localPid: OrderDirection
}

input ArticleReconciliationUpdateInput {
  plateform: PlateformRelateToOneForUpdateInput
  articleId: ArticleRelateToOneForUpdateInput
  localPid: String
}

input PlateformRelateToOneForUpdateInput {
  create: PlateformCreateInput
  connect: PlateformWhereUniqueInput
  disconnect: Boolean
}

input ArticleRelateToOneForUpdateInput {
  create: ArticleCreateInput
  connect: ArticleWhereUniqueInput
  disconnect: Boolean
}

input ArticleReconciliationUpdateArgs {
  where: ArticleReconciliationWhereUniqueInput!
  data: ArticleReconciliationUpdateInput!
}

input ArticleReconciliationCreateInput {
  plateform: PlateformRelateToOneForCreateInput
  articleId: ArticleRelateToOneForCreateInput
  localPid: String
}

input PlateformRelateToOneForCreateInput {
  create: PlateformCreateInput
  connect: PlateformWhereUniqueInput
}

input ArticleRelateToOneForCreateInput {
  create: ArticleCreateInput
  connect: ArticleWhereUniqueInput
}

type Batch {
  id: ID!
  condition: String
  expansion: String
  time: Int
  article_number: Int
  createdAt: DateTime
  updatedAt: DateTime
  operator: Person
}

input BatchWhereUniqueInput {
  id: ID
}

input BatchWhereInput {
  AND: [BatchWhereInput!]
  OR: [BatchWhereInput!]
  NOT: [BatchWhereInput!]
  id: IDFilter
  condition: StringFilter
  expansion: StringFilter
  time: IntNullableFilter
  article_number: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  operator: PersonWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BatchOrderByInput {
  id: OrderDirection
  condition: OrderDirection
  expansion: OrderDirection
  time: OrderDirection
  article_number: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input BatchUpdateInput {
  condition: String
  expansion: String
  time: Int
  article_number: Int
  createdAt: DateTime
  updatedAt: DateTime
  operator: PersonRelateToOneForUpdateInput
}

input BatchUpdateArgs {
  where: BatchWhereUniqueInput!
  data: BatchUpdateInput!
}

input BatchCreateInput {
  condition: String
  expansion: String
  time: Int
  article_number: Int
  createdAt: DateTime
  updatedAt: DateTime
  operator: PersonRelateToOneForCreateInput
}

type BatchProd {
  id: ID!
  name: String
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  articlesCount(where: ArticleWhereInput! = {}): Int
}

input BatchProdWhereUniqueInput {
  id: ID
}

input BatchProdWhereInput {
  AND: [BatchProdWhereInput!]
  OR: [BatchProdWhereInput!]
  NOT: [BatchProdWhereInput!]
  id: IDFilter
  name: StringFilter
  articles: ArticleManyRelationFilter
}

input ArticleManyRelationFilter {
  every: ArticleWhereInput
  some: ArticleWhereInput
  none: ArticleWhereInput
}

input BatchProdOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input BatchProdUpdateInput {
  name: String
  articles: ArticleRelateToManyForUpdateInput
}

input ArticleRelateToManyForUpdateInput {
  disconnect: [ArticleWhereUniqueInput!]
  set: [ArticleWhereUniqueInput!]
  create: [ArticleCreateInput!]
  connect: [ArticleWhereUniqueInput!]
}

input BatchProdUpdateArgs {
  where: BatchProdWhereUniqueInput!
  data: BatchProdUpdateInput!
}

input BatchProdCreateInput {
  name: String
  articles: ArticleRelateToManyForCreateInput
}

input ArticleRelateToManyForCreateInput {
  create: [ArticleCreateInput!]
  connect: [ArticleWhereUniqueInput!]
}

type Category {
  id: ID!
  name: String
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  idMkm: String
}

input CategoryWhereUniqueInput {
  id: ID
  name: String
  idMkm: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  products: ProductManyRelationFilter
  idMkm: StringFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  idMkm: OrderDirection
}

input CategoryUpdateInput {
  name: String
  products: ProductRelateToManyForUpdateInput
  idMkm: String
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  products: ProductRelateToManyForCreateInput
  idMkm: String
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type Comment {
  id: ID!
  text: String
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  text: StringFilter
}

input CommentOrderByInput {
  id: OrderDirection
  text: OrderDirection
}

input CommentUpdateInput {
  text: String
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  text: String
}

type Condition {
  id: ID!
  name: String
  value: Int
  code: String
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  articlesCount(where: ArticleWhereInput! = {}): Int
}

input ConditionWhereUniqueInput {
  id: ID
  value: Int
  code: String
}

input ConditionWhereInput {
  AND: [ConditionWhereInput!]
  OR: [ConditionWhereInput!]
  NOT: [ConditionWhereInput!]
  id: IDFilter
  name: StringFilter
  value: IntNullableFilter
  code: StringFilter
  articles: ArticleManyRelationFilter
}

input ConditionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  value: OrderDirection
  code: OrderDirection
}

input ConditionUpdateInput {
  name: String
  value: Int
  code: String
  articles: ArticleRelateToManyForUpdateInput
}

input ConditionUpdateArgs {
  where: ConditionWhereUniqueInput!
  data: ConditionUpdateInput!
}

input ConditionCreateInput {
  name: String
  value: Int
  code: String
  articles: ArticleRelateToManyForCreateInput
}

type ControlAction {
  id: ID!
  name: String
  description: String
  action_status: String
  result: String
  start_time: DateTime
  end_time: DateTime
  expected_start_time: DateTime
  expected_end_time: DateTime
  agent: Person
  targetStorage: Storage
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
}

input ControlActionWhereUniqueInput {
  id: ID
}

input ControlActionWhereInput {
  AND: [ControlActionWhereInput!]
  OR: [ControlActionWhereInput!]
  NOT: [ControlActionWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  action_status: StringFilter
  result: StringFilter
  start_time: DateTimeNullableFilter
  end_time: DateTimeNullableFilter
  expected_start_time: DateTimeNullableFilter
  expected_end_time: DateTimeNullableFilter
  agent: PersonWhereInput
  targetStorage: StorageWhereInput
  comments: CommentManyRelationFilter
}

input ControlActionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  action_status: OrderDirection
  result: OrderDirection
  start_time: OrderDirection
  end_time: OrderDirection
  expected_start_time: OrderDirection
  expected_end_time: OrderDirection
}

input ControlActionUpdateInput {
  name: String
  description: String
  action_status: String
  result: String
  start_time: DateTime
  end_time: DateTime
  expected_start_time: DateTime
  expected_end_time: DateTime
  agent: PersonRelateToOneForUpdateInput
  targetStorage: StorageRelateToOneForUpdateInput
  comments: CommentRelateToManyForUpdateInput
}

input StorageRelateToOneForUpdateInput {
  create: StorageCreateInput
  connect: StorageWhereUniqueInput
  disconnect: Boolean
}

input ControlActionUpdateArgs {
  where: ControlActionWhereUniqueInput!
  data: ControlActionUpdateInput!
}

input ControlActionCreateInput {
  name: String
  description: String
  action_status: String
  result: String
  start_time: DateTime
  end_time: DateTime
  expected_start_time: DateTime
  expected_end_time: DateTime
  agent: PersonRelateToOneForCreateInput
  targetStorage: StorageRelateToOneForCreateInput
  comments: CommentRelateToManyForCreateInput
}

input StorageRelateToOneForCreateInput {
  create: StorageCreateInput
  connect: StorageWhereUniqueInput
}

type Country {
  id: ID!
  name: String
  native: String
  code: String
  phone: Int
  capital: String
  currencies(
    where: CurrencyWhereInput! = {}
    orderBy: [CurrencyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Currency!]
  currenciesCount(where: CurrencyWhereInput! = {}): Int
  languages(
    where: LanguageWhereInput! = {}
    orderBy: [LanguageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Language!]
  languagesCount(where: LanguageWhereInput! = {}): Int
  emoji: String
  emojiU: String
}

input CountryWhereUniqueInput {
  id: ID
  name: String
  code: String
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  id: IDFilter
  name: StringFilter
  native: StringFilter
  code: StringFilter
  phone: IntNullableFilter
  capital: StringFilter
  currencies: CurrencyManyRelationFilter
  languages: LanguageManyRelationFilter
  emoji: StringFilter
  emojiU: StringFilter
}

input CurrencyManyRelationFilter {
  every: CurrencyWhereInput
  some: CurrencyWhereInput
  none: CurrencyWhereInput
}

input LanguageManyRelationFilter {
  every: LanguageWhereInput
  some: LanguageWhereInput
  none: LanguageWhereInput
}

input CountryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  native: OrderDirection
  code: OrderDirection
  phone: OrderDirection
  capital: OrderDirection
  emoji: OrderDirection
  emojiU: OrderDirection
}

input CountryUpdateInput {
  name: String
  native: String
  code: String
  phone: Int
  capital: String
  currencies: CurrencyRelateToManyForUpdateInput
  languages: LanguageRelateToManyForUpdateInput
  emoji: String
  emojiU: String
}

input CurrencyRelateToManyForUpdateInput {
  disconnect: [CurrencyWhereUniqueInput!]
  set: [CurrencyWhereUniqueInput!]
  create: [CurrencyCreateInput!]
  connect: [CurrencyWhereUniqueInput!]
}

input LanguageRelateToManyForUpdateInput {
  disconnect: [LanguageWhereUniqueInput!]
  set: [LanguageWhereUniqueInput!]
  create: [LanguageCreateInput!]
  connect: [LanguageWhereUniqueInput!]
}

input CountryUpdateArgs {
  where: CountryWhereUniqueInput!
  data: CountryUpdateInput!
}

input CountryCreateInput {
  name: String
  native: String
  code: String
  phone: Int
  capital: String
  currencies: CurrencyRelateToManyForCreateInput
  languages: LanguageRelateToManyForCreateInput
  emoji: String
  emojiU: String
}

input CurrencyRelateToManyForCreateInput {
  create: [CurrencyCreateInput!]
  connect: [CurrencyWhereUniqueInput!]
}

input LanguageRelateToManyForCreateInput {
  create: [LanguageCreateInput!]
  connect: [LanguageWhereUniqueInput!]
}

type CountryGroup {
  id: ID!
  code: String
  name: String
  countries(
    where: CountryWhereInput! = {}
    orderBy: [CountryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Country!]
  countriesCount(where: CountryWhereInput! = {}): Int
}

input CountryGroupWhereUniqueInput {
  id: ID
}

input CountryGroupWhereInput {
  AND: [CountryGroupWhereInput!]
  OR: [CountryGroupWhereInput!]
  NOT: [CountryGroupWhereInput!]
  id: IDFilter
  code: StringFilter
  name: StringFilter
  countries: CountryManyRelationFilter
}

input CountryManyRelationFilter {
  every: CountryWhereInput
  some: CountryWhereInput
  none: CountryWhereInput
}

input CountryGroupOrderByInput {
  id: OrderDirection
  code: OrderDirection
  name: OrderDirection
}

input CountryGroupUpdateInput {
  code: String
  name: String
  countries: CountryRelateToManyForUpdateInput
}

input CountryRelateToManyForUpdateInput {
  disconnect: [CountryWhereUniqueInput!]
  set: [CountryWhereUniqueInput!]
  create: [CountryCreateInput!]
  connect: [CountryWhereUniqueInput!]
}

input CountryGroupUpdateArgs {
  where: CountryGroupWhereUniqueInput!
  data: CountryGroupUpdateInput!
}

input CountryGroupCreateInput {
  code: String
  name: String
  countries: CountryRelateToManyForCreateInput
}

input CountryRelateToManyForCreateInput {
  create: [CountryCreateInput!]
  connect: [CountryWhereUniqueInput!]
}

type Currency {
  id: ID!
  name: String
  namePlural: String
  code: String
  symbol: String
  symbolNative: String
  decimalDigits: Int
  countries(
    where: CountryWhereInput! = {}
    orderBy: [CountryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Country!]
  countriesCount(where: CountryWhereInput! = {}): Int
}

input CurrencyWhereUniqueInput {
  id: ID
  code: String
}

input CurrencyWhereInput {
  AND: [CurrencyWhereInput!]
  OR: [CurrencyWhereInput!]
  NOT: [CurrencyWhereInput!]
  id: IDFilter
  name: StringFilter
  namePlural: StringFilter
  code: StringFilter
  symbol: StringFilter
  symbolNative: StringFilter
  decimalDigits: IntNullableFilter
  countries: CountryManyRelationFilter
}

input CurrencyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  namePlural: OrderDirection
  code: OrderDirection
  symbol: OrderDirection
  symbolNative: OrderDirection
  decimalDigits: OrderDirection
}

input CurrencyUpdateInput {
  name: String
  namePlural: String
  code: String
  symbol: String
  symbolNative: String
  decimalDigits: Int
  countries: CountryRelateToManyForUpdateInput
}

input CurrencyUpdateArgs {
  where: CurrencyWhereUniqueInput!
  data: CurrencyUpdateInput!
}

input CurrencyCreateInput {
  name: String
  namePlural: String
  code: String
  symbol: String
  symbolNative: String
  decimalDigits: Int
  countries: CountryRelateToManyForCreateInput
}

type Expansion {
  id: ID!
  abbreviation: String
  slug: String
  icon: String
  dateRelease: DateTime
  isReleased: Boolean
  areProductsLoaded: Boolean
  game: Game
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  storages(
    where: StorageWhereInput! = {}
    orderBy: [StorageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Storage!]
  storagesCount(where: StorageWhereInput! = {}): Int
  locals(
    where: ExpansionLocalWhereInput! = {}
    orderBy: [ExpansionLocalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ExpansionLocal!]
  localsCount(where: ExpansionLocalWhereInput! = {}): Int
  reconciliations(
    where: ExpansionReconciliationWhereInput! = {}
    orderBy: [ExpansionReconciliationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ExpansionReconciliation!]
  reconciliationsCount(where: ExpansionReconciliationWhereInput! = {}): Int
  updatedAt: DateTime
}

input ExpansionWhereUniqueInput {
  id: ID
}

input ExpansionWhereInput {
  AND: [ExpansionWhereInput!]
  OR: [ExpansionWhereInput!]
  NOT: [ExpansionWhereInput!]
  id: IDFilter
  abbreviation: StringFilter
  slug: StringFilter
  icon: StringFilter
  dateRelease: DateTimeNullableFilter
  isReleased: BooleanFilter
  areProductsLoaded: BooleanFilter
  game: GameWhereInput
  products: ProductManyRelationFilter
  storages: StorageManyRelationFilter
  locals: ExpansionLocalManyRelationFilter
  reconciliations: ExpansionReconciliationManyRelationFilter
  updatedAt: DateTimeNullableFilter
}

input StorageManyRelationFilter {
  every: StorageWhereInput
  some: StorageWhereInput
  none: StorageWhereInput
}

input ExpansionLocalManyRelationFilter {
  every: ExpansionLocalWhereInput
  some: ExpansionLocalWhereInput
  none: ExpansionLocalWhereInput
}

input ExpansionReconciliationManyRelationFilter {
  every: ExpansionReconciliationWhereInput
  some: ExpansionReconciliationWhereInput
  none: ExpansionReconciliationWhereInput
}

input ExpansionOrderByInput {
  id: OrderDirection
  abbreviation: OrderDirection
  slug: OrderDirection
  icon: OrderDirection
  dateRelease: OrderDirection
  isReleased: OrderDirection
  areProductsLoaded: OrderDirection
  updatedAt: OrderDirection
}

input ExpansionUpdateInput {
  abbreviation: String
  slug: String
  icon: String
  dateRelease: DateTime
  isReleased: Boolean
  areProductsLoaded: Boolean
  game: GameRelateToOneForUpdateInput
  products: ProductRelateToManyForUpdateInput
  storages: StorageRelateToManyForUpdateInput
  locals: ExpansionLocalRelateToManyForUpdateInput
  reconciliations: ExpansionReconciliationRelateToManyForUpdateInput
  updatedAt: DateTime
}

input GameRelateToOneForUpdateInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
  disconnect: Boolean
}

input StorageRelateToManyForUpdateInput {
  disconnect: [StorageWhereUniqueInput!]
  set: [StorageWhereUniqueInput!]
  create: [StorageCreateInput!]
  connect: [StorageWhereUniqueInput!]
}

input ExpansionLocalRelateToManyForUpdateInput {
  disconnect: [ExpansionLocalWhereUniqueInput!]
  set: [ExpansionLocalWhereUniqueInput!]
  create: [ExpansionLocalCreateInput!]
  connect: [ExpansionLocalWhereUniqueInput!]
}

input ExpansionReconciliationRelateToManyForUpdateInput {
  disconnect: [ExpansionReconciliationWhereUniqueInput!]
  set: [ExpansionReconciliationWhereUniqueInput!]
  create: [ExpansionReconciliationCreateInput!]
  connect: [ExpansionReconciliationWhereUniqueInput!]
}

input ExpansionUpdateArgs {
  where: ExpansionWhereUniqueInput!
  data: ExpansionUpdateInput!
}

input ExpansionCreateInput {
  abbreviation: String
  slug: String
  icon: String
  dateRelease: DateTime
  isReleased: Boolean
  areProductsLoaded: Boolean
  game: GameRelateToOneForCreateInput
  products: ProductRelateToManyForCreateInput
  storages: StorageRelateToManyForCreateInput
  locals: ExpansionLocalRelateToManyForCreateInput
  reconciliations: ExpansionReconciliationRelateToManyForCreateInput
  updatedAt: DateTime
}

input GameRelateToOneForCreateInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
}

input StorageRelateToManyForCreateInput {
  create: [StorageCreateInput!]
  connect: [StorageWhereUniqueInput!]
}

input ExpansionLocalRelateToManyForCreateInput {
  create: [ExpansionLocalCreateInput!]
  connect: [ExpansionLocalWhereUniqueInput!]
}

input ExpansionReconciliationRelateToManyForCreateInput {
  create: [ExpansionReconciliationCreateInput!]
  connect: [ExpansionReconciliationWhereUniqueInput!]
}

type ExpansionLocal {
  id: ID!
  name: String
  imageToken: String
  language: Language
  expansion: Expansion
}

input ExpansionLocalWhereUniqueInput {
  id: ID
}

input ExpansionLocalWhereInput {
  AND: [ExpansionLocalWhereInput!]
  OR: [ExpansionLocalWhereInput!]
  NOT: [ExpansionLocalWhereInput!]
  id: IDFilter
  name: StringFilter
  imageToken: StringFilter
  language: LanguageWhereInput
  expansion: ExpansionWhereInput
}

input ExpansionLocalOrderByInput {
  id: OrderDirection
  name: OrderDirection
  imageToken: OrderDirection
}

input ExpansionLocalUpdateInput {
  name: String
  imageToken: String
  language: LanguageRelateToOneForUpdateInput
  expansion: ExpansionRelateToOneForUpdateInput
}

input ExpansionRelateToOneForUpdateInput {
  create: ExpansionCreateInput
  connect: ExpansionWhereUniqueInput
  disconnect: Boolean
}

input ExpansionLocalUpdateArgs {
  where: ExpansionLocalWhereUniqueInput!
  data: ExpansionLocalUpdateInput!
}

input ExpansionLocalCreateInput {
  name: String
  imageToken: String
  language: LanguageRelateToOneForCreateInput
  expansion: ExpansionRelateToOneForCreateInput
}

input ExpansionRelateToOneForCreateInput {
  create: ExpansionCreateInput
  connect: ExpansionWhereUniqueInput
}

type ExpansionReconciliation {
  id: ID!
  plateform: Plateform
  expansionId: Expansion
  localPid: String
}

input ExpansionReconciliationWhereUniqueInput {
  id: ID
}

input ExpansionReconciliationWhereInput {
  AND: [ExpansionReconciliationWhereInput!]
  OR: [ExpansionReconciliationWhereInput!]
  NOT: [ExpansionReconciliationWhereInput!]
  id: IDFilter
  plateform: PlateformWhereInput
  expansionId: ExpansionWhereInput
  localPid: StringFilter
}

input ExpansionReconciliationOrderByInput {
  id: OrderDirection
  localPid: OrderDirection
}

input ExpansionReconciliationUpdateInput {
  plateform: PlateformRelateToOneForUpdateInput
  expansionId: ExpansionRelateToOneForUpdateInput
  localPid: String
}

input ExpansionReconciliationUpdateArgs {
  where: ExpansionReconciliationWhereUniqueInput!
  data: ExpansionReconciliationUpdateInput!
}

input ExpansionReconciliationCreateInput {
  plateform: PlateformRelateToOneForCreateInput
  expansionId: ExpansionRelateToOneForCreateInput
  localPid: String
}

type Game {
  id: ID!
  name: String
  code: String
  productModels(
    where: ProductModelWhereInput! = {}
    orderBy: [ProductModelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductModel!]
  productModelsCount(where: ProductModelWhereInput! = {}): Int
  expansions(
    where: ExpansionWhereInput! = {}
    orderBy: [ExpansionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Expansion!]
  expansionsCount(where: ExpansionWhereInput! = {}): Int
  idMkm: String
}

input GameWhereUniqueInput {
  id: ID
  code: String
  idMkm: String
}

input GameWhereInput {
  AND: [GameWhereInput!]
  OR: [GameWhereInput!]
  NOT: [GameWhereInput!]
  id: IDFilter
  name: StringFilter
  code: StringFilter
  productModels: ProductModelManyRelationFilter
  expansions: ExpansionManyRelationFilter
  idMkm: StringFilter
}

input ProductModelManyRelationFilter {
  every: ProductModelWhereInput
  some: ProductModelWhereInput
  none: ProductModelWhereInput
}

input ExpansionManyRelationFilter {
  every: ExpansionWhereInput
  some: ExpansionWhereInput
  none: ExpansionWhereInput
}

input GameOrderByInput {
  id: OrderDirection
  name: OrderDirection
  code: OrderDirection
  idMkm: OrderDirection
}

input GameUpdateInput {
  name: String
  code: String
  productModels: ProductModelRelateToManyForUpdateInput
  expansions: ExpansionRelateToManyForUpdateInput
  idMkm: String
}

input ProductModelRelateToManyForUpdateInput {
  disconnect: [ProductModelWhereUniqueInput!]
  set: [ProductModelWhereUniqueInput!]
  create: [ProductModelCreateInput!]
  connect: [ProductModelWhereUniqueInput!]
}

input ExpansionRelateToManyForUpdateInput {
  disconnect: [ExpansionWhereUniqueInput!]
  set: [ExpansionWhereUniqueInput!]
  create: [ExpansionCreateInput!]
  connect: [ExpansionWhereUniqueInput!]
}

input GameUpdateArgs {
  where: GameWhereUniqueInput!
  data: GameUpdateInput!
}

input GameCreateInput {
  name: String
  code: String
  productModels: ProductModelRelateToManyForCreateInput
  expansions: ExpansionRelateToManyForCreateInput
  idMkm: String
}

input ProductModelRelateToManyForCreateInput {
  create: [ProductModelCreateInput!]
  connect: [ProductModelWhereUniqueInput!]
}

input ExpansionRelateToManyForCreateInput {
  create: [ExpansionCreateInput!]
  connect: [ExpansionWhereUniqueInput!]
}

type Language {
  id: ID!
  name: String
  code: String
  native: String
  rtl: Boolean
  idMkm: String
}

input LanguageWhereUniqueInput {
  id: ID
  code: String
}

input LanguageWhereInput {
  AND: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
  id: IDFilter
  name: StringFilter
  code: StringFilter
  native: StringFilter
  rtl: BooleanFilter
  idMkm: StringFilter
}

input LanguageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  code: OrderDirection
  native: OrderDirection
  rtl: OrderDirection
  idMkm: OrderDirection
}

input LanguageUpdateInput {
  name: String
  code: String
  native: String
  rtl: Boolean
  idMkm: String
}

input LanguageUpdateArgs {
  where: LanguageWhereUniqueInput!
  data: LanguageUpdateInput!
}

input LanguageCreateInput {
  name: String
  code: String
  native: String
  rtl: Boolean
  idMkm: String
}

type Link {
  id: ID!
  targetId: String
  targetType: String
  targetField: String
}

input LinkWhereUniqueInput {
  id: ID
}

input LinkWhereInput {
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
  id: IDFilter
  targetId: StringFilter
  targetType: StringFilter
  targetField: StringFilter
}

input LinkOrderByInput {
  id: OrderDirection
  targetId: OrderDirection
  targetType: OrderDirection
  targetField: OrderDirection
}

input LinkUpdateInput {
  targetId: String
  targetType: String
  targetField: String
}

input LinkUpdateArgs {
  where: LinkWhereUniqueInput!
  data: LinkUpdateInput!
}

input LinkCreateInput {
  targetId: String
  targetType: String
  targetField: String
}

type MediaObject {
  id: ID!
  typeOf: String
  extension: String
  name: String
  description: String
  alt: String
  url: String
  backlinks(
    where: LinkWhereInput! = {}
    orderBy: [LinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Link!]
  backlinksCount(where: LinkWhereInput! = {}): Int
}

input MediaObjectWhereUniqueInput {
  id: ID
}

input MediaObjectWhereInput {
  AND: [MediaObjectWhereInput!]
  OR: [MediaObjectWhereInput!]
  NOT: [MediaObjectWhereInput!]
  id: IDFilter
  typeOf: StringFilter
  extension: StringFilter
  name: StringFilter
  description: StringFilter
  alt: StringFilter
  url: StringFilter
  backlinks: LinkManyRelationFilter
}

input LinkManyRelationFilter {
  every: LinkWhereInput
  some: LinkWhereInput
  none: LinkWhereInput
}

input MediaObjectOrderByInput {
  id: OrderDirection
  typeOf: OrderDirection
  extension: OrderDirection
  name: OrderDirection
  description: OrderDirection
  alt: OrderDirection
  url: OrderDirection
}

input MediaObjectUpdateInput {
  typeOf: String
  extension: String
  name: String
  description: String
  alt: String
  url: String
  backlinks: LinkRelateToManyForUpdateInput
}

input LinkRelateToManyForUpdateInput {
  disconnect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  create: [LinkCreateInput!]
  connect: [LinkWhereUniqueInput!]
}

input MediaObjectUpdateArgs {
  where: MediaObjectWhereUniqueInput!
  data: MediaObjectUpdateInput!
}

input MediaObjectCreateInput {
  typeOf: String
  extension: String
  name: String
  description: String
  alt: String
  url: String
  backlinks: LinkRelateToManyForCreateInput
}

input LinkRelateToManyForCreateInput {
  create: [LinkCreateInput!]
  connect: [LinkWhereUniqueInput!]
}

type Offer {
  id: ID!
  pid: String
  status: String
  prices(
    where: PriceOfferWhereInput! = {}
    orderBy: [PriceOfferOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PriceOffer!]
  pricesCount(where: PriceOfferWhereInput! = {}): Int
  eligibleQuantity: Int
  stockUnit: StockUnit
  plateform: Plateform
  lastPrice: PriceOffer
  createdAt: DateTime
  createdBy: Person
}

input OfferWhereUniqueInput {
  id: ID
}

input OfferWhereInput {
  AND: [OfferWhereInput!]
  OR: [OfferWhereInput!]
  NOT: [OfferWhereInput!]
  id: IDFilter
  pid: StringFilter
  status: StringFilter
  prices: PriceOfferManyRelationFilter
  eligibleQuantity: IntNullableFilter
  stockUnit: StockUnitWhereInput
  plateform: PlateformWhereInput
  createdAt: DateTimeNullableFilter
  createdBy: PersonWhereInput
}

input PriceOfferManyRelationFilter {
  every: PriceOfferWhereInput
  some: PriceOfferWhereInput
  none: PriceOfferWhereInput
}

input OfferOrderByInput {
  id: OrderDirection
  pid: OrderDirection
  status: OrderDirection
  eligibleQuantity: OrderDirection
  createdAt: OrderDirection
}

input OfferUpdateInput {
  pid: String
  status: String
  prices: PriceOfferRelateToManyForUpdateInput
  eligibleQuantity: Int
  stockUnit: StockUnitRelateToOneForUpdateInput
  plateform: PlateformRelateToOneForUpdateInput
  createdAt: DateTime
  createdBy: PersonRelateToOneForUpdateInput
}

input PriceOfferRelateToManyForUpdateInput {
  disconnect: [PriceOfferWhereUniqueInput!]
  set: [PriceOfferWhereUniqueInput!]
  create: [PriceOfferCreateInput!]
  connect: [PriceOfferWhereUniqueInput!]
}

input StockUnitRelateToOneForUpdateInput {
  create: StockUnitCreateInput
  connect: StockUnitWhereUniqueInput
  disconnect: Boolean
}

input OfferUpdateArgs {
  where: OfferWhereUniqueInput!
  data: OfferUpdateInput!
}

input OfferCreateInput {
  pid: String
  status: String
  prices: PriceOfferRelateToManyForCreateInput
  eligibleQuantity: Int
  stockUnit: StockUnitRelateToOneForCreateInput
  plateform: PlateformRelateToOneForCreateInput
  createdAt: DateTime
  createdBy: PersonRelateToOneForCreateInput
}

input PriceOfferRelateToManyForCreateInput {
  create: [PriceOfferCreateInput!]
  connect: [PriceOfferWhereUniqueInput!]
}

input StockUnitRelateToOneForCreateInput {
  create: StockUnitCreateInput
  connect: StockUnitWhereUniqueInput
}

type Person {
  id: ID!
  pid: String
  familyName: String
  givenName: String
  email: String
  account: User
  ratings(
    where: RatingWhereInput! = {}
    orderBy: [RatingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rating!]
  ratingsCount(where: RatingWhereInput! = {}): Int
  actions(
    where: ActionWhereInput! = {}
    orderBy: [ActionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Action!]
  actionsCount(where: ActionWhereInput! = {}): Int
}

input PersonWhereUniqueInput {
  id: ID
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: IDFilter
  pid: StringFilter
  familyName: StringFilter
  givenName: StringFilter
  email: StringFilter
  account: UserWhereInput
  ratings: RatingManyRelationFilter
  actions: ActionManyRelationFilter
}

input ActionManyRelationFilter {
  every: ActionWhereInput
  some: ActionWhereInput
  none: ActionWhereInput
}

input PersonOrderByInput {
  id: OrderDirection
  pid: OrderDirection
  familyName: OrderDirection
  givenName: OrderDirection
  email: OrderDirection
}

input PersonUpdateInput {
  pid: String
  familyName: String
  givenName: String
  email: String
  account: UserRelateToOneForUpdateInput
  ratings: RatingRelateToManyForUpdateInput
  actions: ActionRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ActionRelateToManyForUpdateInput {
  disconnect: [ActionWhereUniqueInput!]
  set: [ActionWhereUniqueInput!]
  create: [ActionCreateInput!]
  connect: [ActionWhereUniqueInput!]
}

input PersonUpdateArgs {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}

input PersonCreateInput {
  pid: String
  familyName: String
  givenName: String
  email: String
  account: UserRelateToOneForCreateInput
  ratings: RatingRelateToManyForCreateInput
  actions: ActionRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input ActionRelateToManyForCreateInput {
  create: [ActionCreateInput!]
  connect: [ActionWhereUniqueInput!]
}

type Plateform {
  id: ID!
  pid: String
  name: String
  products(
    where: ProductReconciliationWhereInput! = {}
    orderBy: [ProductReconciliationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductReconciliation!]
  productsCount(where: ProductReconciliationWhereInput! = {}): Int
  articles(
    where: ArticleReconciliationWhereInput! = {}
    orderBy: [ArticleReconciliationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ArticleReconciliation!]
  articlesCount(where: ArticleReconciliationWhereInput! = {}): Int
  expansions(
    where: ExpansionReconciliationWhereInput! = {}
    orderBy: [ExpansionReconciliationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ExpansionReconciliation!]
  expansionsCount(where: ExpansionReconciliationWhereInput! = {}): Int
  offers(
    where: OfferWhereInput! = {}
    orderBy: [OfferOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Offer!]
  offersCount(where: OfferWhereInput! = {}): Int
}

input PlateformWhereUniqueInput {
  id: ID
  pid: String
}

input PlateformWhereInput {
  AND: [PlateformWhereInput!]
  OR: [PlateformWhereInput!]
  NOT: [PlateformWhereInput!]
  id: IDFilter
  pid: StringFilter
  name: StringFilter
  products: ProductReconciliationManyRelationFilter
  articles: ArticleReconciliationManyRelationFilter
  expansions: ExpansionReconciliationManyRelationFilter
  offers: OfferManyRelationFilter
}

input ProductReconciliationManyRelationFilter {
  every: ProductReconciliationWhereInput
  some: ProductReconciliationWhereInput
  none: ProductReconciliationWhereInput
}

input OfferManyRelationFilter {
  every: OfferWhereInput
  some: OfferWhereInput
  none: OfferWhereInput
}

input PlateformOrderByInput {
  id: OrderDirection
  pid: OrderDirection
  name: OrderDirection
}

input PlateformUpdateInput {
  pid: String
  name: String
  products: ProductReconciliationRelateToManyForUpdateInput
  articles: ArticleReconciliationRelateToManyForUpdateInput
  expansions: ExpansionReconciliationRelateToManyForUpdateInput
  offers: OfferRelateToManyForUpdateInput
}

input ProductReconciliationRelateToManyForUpdateInput {
  disconnect: [ProductReconciliationWhereUniqueInput!]
  set: [ProductReconciliationWhereUniqueInput!]
  create: [ProductReconciliationCreateInput!]
  connect: [ProductReconciliationWhereUniqueInput!]
}

input OfferRelateToManyForUpdateInput {
  disconnect: [OfferWhereUniqueInput!]
  set: [OfferWhereUniqueInput!]
  create: [OfferCreateInput!]
  connect: [OfferWhereUniqueInput!]
}

input PlateformUpdateArgs {
  where: PlateformWhereUniqueInput!
  data: PlateformUpdateInput!
}

input PlateformCreateInput {
  pid: String
  name: String
  products: ProductReconciliationRelateToManyForCreateInput
  articles: ArticleReconciliationRelateToManyForCreateInput
  expansions: ExpansionReconciliationRelateToManyForCreateInput
  offers: OfferRelateToManyForCreateInput
}

input ProductReconciliationRelateToManyForCreateInput {
  create: [ProductReconciliationCreateInput!]
  connect: [ProductReconciliationWhereUniqueInput!]
}

input OfferRelateToManyForCreateInput {
  create: [OfferCreateInput!]
  connect: [OfferWhereUniqueInput!]
}

type Price {
  id: ID!
  value: Float
  currency: Currency
  createdAt: DateTime
  createdBy: Person
}

input PriceWhereUniqueInput {
  id: ID
}

input PriceWhereInput {
  AND: [PriceWhereInput!]
  OR: [PriceWhereInput!]
  NOT: [PriceWhereInput!]
  id: IDFilter
  value: FloatNullableFilter
  currency: CurrencyWhereInput
  createdAt: DateTimeNullableFilter
  createdBy: PersonWhereInput
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input PriceOrderByInput {
  id: OrderDirection
  value: OrderDirection
  createdAt: OrderDirection
}

input PriceUpdateInput {
  value: Float
  currency: CurrencyRelateToOneForUpdateInput
  createdAt: DateTime
  createdBy: PersonRelateToOneForUpdateInput
}

input CurrencyRelateToOneForUpdateInput {
  create: CurrencyCreateInput
  connect: CurrencyWhereUniqueInput
  disconnect: Boolean
}

input PriceUpdateArgs {
  where: PriceWhereUniqueInput!
  data: PriceUpdateInput!
}

input PriceCreateInput {
  value: Float
  currency: CurrencyRelateToOneForCreateInput
  createdAt: DateTime
  createdBy: PersonRelateToOneForCreateInput
}

input CurrencyRelateToOneForCreateInput {
  create: CurrencyCreateInput
  connect: CurrencyWhereUniqueInput
}

type PriceOffer {
  id: ID!
  value: Float
  currency: Currency
  offer: Offer
  createdAt: DateTime
  createdBy: Person
}

input PriceOfferWhereUniqueInput {
  id: ID
}

input PriceOfferWhereInput {
  AND: [PriceOfferWhereInput!]
  OR: [PriceOfferWhereInput!]
  NOT: [PriceOfferWhereInput!]
  id: IDFilter
  value: FloatNullableFilter
  currency: CurrencyWhereInput
  offer: OfferWhereInput
  createdAt: DateTimeNullableFilter
  createdBy: PersonWhereInput
}

input PriceOfferOrderByInput {
  id: OrderDirection
  value: OrderDirection
  createdAt: OrderDirection
}

input PriceOfferUpdateInput {
  value: Float
  currency: CurrencyRelateToOneForUpdateInput
  offer: OfferRelateToOneForUpdateInput
  createdAt: DateTime
  createdBy: PersonRelateToOneForUpdateInput
}

input OfferRelateToOneForUpdateInput {
  create: OfferCreateInput
  connect: OfferWhereUniqueInput
  disconnect: Boolean
}

input PriceOfferUpdateArgs {
  where: PriceOfferWhereUniqueInput!
  data: PriceOfferUpdateInput!
}

input PriceOfferCreateInput {
  value: Float
  currency: CurrencyRelateToOneForCreateInput
  offer: OfferRelateToOneForCreateInput
  createdAt: DateTime
  createdBy: PersonRelateToOneForCreateInput
}

input OfferRelateToOneForCreateInput {
  create: OfferCreateInput
  connect: OfferWhereUniqueInput
}

type Pricing {
  id: ID!
  prices(
    where: PriceWhereInput! = {}
    orderBy: [PriceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Price!]
  pricesCount(where: PriceWhereInput! = {}): Int
  countries(
    where: CountryWhereInput! = {}
    orderBy: [CountryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Country!]
  countriesCount(where: CountryWhereInput! = {}): Int
  zones(
    where: CountryGroupWhereInput! = {}
    orderBy: [CountryGroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CountryGroup!]
  zonesCount(where: CountryGroupWhereInput! = {}): Int
}

input PricingWhereUniqueInput {
  id: ID
}

input PricingWhereInput {
  AND: [PricingWhereInput!]
  OR: [PricingWhereInput!]
  NOT: [PricingWhereInput!]
  id: IDFilter
  prices: PriceManyRelationFilter
  countries: CountryManyRelationFilter
  zones: CountryGroupManyRelationFilter
}

input CountryGroupManyRelationFilter {
  every: CountryGroupWhereInput
  some: CountryGroupWhereInput
  none: CountryGroupWhereInput
}

input PricingOrderByInput {
  id: OrderDirection
}

input PricingUpdateInput {
  prices: PriceRelateToManyForUpdateInput
  countries: CountryRelateToManyForUpdateInput
  zones: CountryGroupRelateToManyForUpdateInput
}

input CountryGroupRelateToManyForUpdateInput {
  disconnect: [CountryGroupWhereUniqueInput!]
  set: [CountryGroupWhereUniqueInput!]
  create: [CountryGroupCreateInput!]
  connect: [CountryGroupWhereUniqueInput!]
}

input PricingUpdateArgs {
  where: PricingWhereUniqueInput!
  data: PricingUpdateInput!
}

input PricingCreateInput {
  prices: PriceRelateToManyForCreateInput
  countries: CountryRelateToManyForCreateInput
  zones: CountryGroupRelateToManyForCreateInput
}

input CountryGroupRelateToManyForCreateInput {
  create: [CountryGroupCreateInput!]
  connect: [CountryGroupWhereUniqueInput!]
}

type Product {
  id: ID!
  status: String
  number: String
  website: String
  locals(
    where: ProductLocalWhereInput! = {}
    orderBy: [ProductLocalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductLocal!]
  localsCount(where: ProductLocalWhereInput! = {}): Int
  countSells: Int
  priceStrategy: Int
  image: MediaObject
  links(
    where: LinkWhereInput! = {}
    orderBy: [LinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Link!]
  linksCount(where: LinkWhereInput! = {}): Int
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  articlesCount(where: ArticleWhereInput! = {}): Int
  expansion: Expansion
  productModel: ProductModel
  category: Category
  rarity: Rarity
  reconciliations(
    where: ProductReconciliationWhereInput! = {}
    orderBy: [ProductReconciliationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductReconciliation!]
  reconciliationsCount(where: ProductReconciliationWhereInput! = {}): Int
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  status: StringFilter
  number: StringFilter
  website: StringFilter
  locals: ProductLocalManyRelationFilter
  countSells: IntNullableFilter
  priceStrategy: IntNullableFilter
  image: MediaObjectWhereInput
  links: LinkManyRelationFilter
  articles: ArticleManyRelationFilter
  expansion: ExpansionWhereInput
  productModel: ProductModelWhereInput
  category: CategoryWhereInput
  rarity: RarityWhereInput
  reconciliations: ProductReconciliationManyRelationFilter
}

input ProductLocalManyRelationFilter {
  every: ProductLocalWhereInput
  some: ProductLocalWhereInput
  none: ProductLocalWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  status: OrderDirection
  number: OrderDirection
  website: OrderDirection
  countSells: OrderDirection
  priceStrategy: OrderDirection
}

input ProductUpdateInput {
  status: String
  number: String
  website: String
  locals: ProductLocalRelateToManyForUpdateInput
  countSells: Int
  priceStrategy: Int
  image: MediaObjectRelateToOneForUpdateInput
  links: LinkRelateToManyForUpdateInput
  articles: ArticleRelateToManyForUpdateInput
  expansion: ExpansionRelateToOneForUpdateInput
  productModel: ProductModelRelateToOneForUpdateInput
  category: CategoryRelateToOneForUpdateInput
  rarity: RarityRelateToOneForUpdateInput
  reconciliations: ProductReconciliationRelateToManyForUpdateInput
}

input ProductLocalRelateToManyForUpdateInput {
  disconnect: [ProductLocalWhereUniqueInput!]
  set: [ProductLocalWhereUniqueInput!]
  create: [ProductLocalCreateInput!]
  connect: [ProductLocalWhereUniqueInput!]
}

input MediaObjectRelateToOneForUpdateInput {
  create: MediaObjectCreateInput
  connect: MediaObjectWhereUniqueInput
  disconnect: Boolean
}

input ProductModelRelateToOneForUpdateInput {
  create: ProductModelCreateInput
  connect: ProductModelWhereUniqueInput
  disconnect: Boolean
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input RarityRelateToOneForUpdateInput {
  create: RarityCreateInput
  connect: RarityWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  status: String
  number: String
  website: String
  locals: ProductLocalRelateToManyForCreateInput
  countSells: Int
  priceStrategy: Int
  image: MediaObjectRelateToOneForCreateInput
  links: LinkRelateToManyForCreateInput
  articles: ArticleRelateToManyForCreateInput
  expansion: ExpansionRelateToOneForCreateInput
  productModel: ProductModelRelateToOneForCreateInput
  category: CategoryRelateToOneForCreateInput
  rarity: RarityRelateToOneForCreateInput
  reconciliations: ProductReconciliationRelateToManyForCreateInput
}

input ProductLocalRelateToManyForCreateInput {
  create: [ProductLocalCreateInput!]
  connect: [ProductLocalWhereUniqueInput!]
}

input MediaObjectRelateToOneForCreateInput {
  create: MediaObjectCreateInput
  connect: MediaObjectWhereUniqueInput
}

input ProductModelRelateToOneForCreateInput {
  create: ProductModelCreateInput
  connect: ProductModelWhereUniqueInput
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input RarityRelateToOneForCreateInput {
  create: RarityCreateInput
  connect: RarityWhereUniqueInput
}

type ProductLocal {
  id: ID!
  language: Language
  name: String
  image: MediaObject
}

input ProductLocalWhereUniqueInput {
  id: ID
}

input ProductLocalWhereInput {
  AND: [ProductLocalWhereInput!]
  OR: [ProductLocalWhereInput!]
  NOT: [ProductLocalWhereInput!]
  id: IDFilter
  language: LanguageWhereInput
  name: StringFilter
  image: MediaObjectWhereInput
}

input ProductLocalOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ProductLocalUpdateInput {
  language: LanguageRelateToOneForUpdateInput
  name: String
  image: MediaObjectRelateToOneForUpdateInput
}

input ProductLocalUpdateArgs {
  where: ProductLocalWhereUniqueInput!
  data: ProductLocalUpdateInput!
}

input ProductLocalCreateInput {
  language: LanguageRelateToOneForCreateInput
  name: String
  image: MediaObjectRelateToOneForCreateInput
}

type ProductModel {
  id: ID!
  name: String
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  game: Game
  idMkm: String
}

input ProductModelWhereUniqueInput {
  id: ID
  idMkm: String
}

input ProductModelWhereInput {
  AND: [ProductModelWhereInput!]
  OR: [ProductModelWhereInput!]
  NOT: [ProductModelWhereInput!]
  id: IDFilter
  name: StringFilter
  products: ProductManyRelationFilter
  game: GameWhereInput
  idMkm: StringFilter
}

input ProductModelOrderByInput {
  id: OrderDirection
  name: OrderDirection
  idMkm: OrderDirection
}

input ProductModelUpdateInput {
  name: String
  products: ProductRelateToManyForUpdateInput
  game: GameRelateToOneForUpdateInput
  idMkm: String
}

input ProductModelUpdateArgs {
  where: ProductModelWhereUniqueInput!
  data: ProductModelUpdateInput!
}

input ProductModelCreateInput {
  name: String
  products: ProductRelateToManyForCreateInput
  game: GameRelateToOneForCreateInput
  idMkm: String
}

type ProductReconciliation {
  id: ID!
  plateform: Plateform
  productId: Product
  localPid: String
}

input ProductReconciliationWhereUniqueInput {
  id: ID
}

input ProductReconciliationWhereInput {
  AND: [ProductReconciliationWhereInput!]
  OR: [ProductReconciliationWhereInput!]
  NOT: [ProductReconciliationWhereInput!]
  id: IDFilter
  plateform: PlateformWhereInput
  productId: ProductWhereInput
  localPid: StringFilter
}

input ProductReconciliationOrderByInput {
  id: OrderDirection
  localPid: OrderDirection
}

input ProductReconciliationUpdateInput {
  plateform: PlateformRelateToOneForUpdateInput
  productId: ProductRelateToOneForUpdateInput
  localPid: String
}

input ProductReconciliationUpdateArgs {
  where: ProductReconciliationWhereUniqueInput!
  data: ProductReconciliationUpdateInput!
}

input ProductReconciliationCreateInput {
  plateform: PlateformRelateToOneForCreateInput
  productId: ProductRelateToOneForCreateInput
  localPid: String
}

type StockUnitQuantity {
  id: ID!
  value: Int
  stockUnit: StockUnit
  createdAt: DateTime
  createdBy: Person
}

input StockUnitQuantityWhereUniqueInput {
  id: ID
}

input StockUnitQuantityWhereInput {
  AND: [StockUnitQuantityWhereInput!]
  OR: [StockUnitQuantityWhereInput!]
  NOT: [StockUnitQuantityWhereInput!]
  id: IDFilter
  value: IntNullableFilter
  stockUnit: StockUnitWhereInput
  createdAt: DateTimeNullableFilter
  createdBy: PersonWhereInput
}

input StockUnitQuantityOrderByInput {
  id: OrderDirection
  value: OrderDirection
  createdAt: OrderDirection
}

input StockUnitQuantityUpdateInput {
  value: Int
  stockUnit: StockUnitRelateToOneForUpdateInput
  createdAt: DateTime
  createdBy: PersonRelateToOneForUpdateInput
}

input StockUnitQuantityUpdateArgs {
  where: StockUnitQuantityWhereUniqueInput!
  data: StockUnitQuantityUpdateInput!
}

input StockUnitQuantityCreateInput {
  value: Int
  stockUnit: StockUnitRelateToOneForCreateInput
  createdAt: DateTime
  createdBy: PersonRelateToOneForCreateInput
}

type Rarity {
  id: ID!
  name: String
  value: Int
  group: Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
}

input RarityWhereUniqueInput {
  id: ID
  name: String
  value: Int
}

input RarityWhereInput {
  AND: [RarityWhereInput!]
  OR: [RarityWhereInput!]
  NOT: [RarityWhereInput!]
  id: IDFilter
  name: StringFilter
  value: IntNullableFilter
  group: IntNullableFilter
  products: ProductManyRelationFilter
}

input RarityOrderByInput {
  id: OrderDirection
  name: OrderDirection
  value: OrderDirection
  group: OrderDirection
}

input RarityUpdateInput {
  name: String
  value: Int
  group: Int
  products: ProductRelateToManyForUpdateInput
}

input RarityUpdateArgs {
  where: RarityWhereUniqueInput!
  data: RarityUpdateInput!
}

input RarityCreateInput {
  name: String
  value: Int
  group: Int
  products: ProductRelateToManyForCreateInput
}

type Rating {
  id: ID!
  value: Int
  author: Person
}

input RatingWhereUniqueInput {
  id: ID
}

input RatingWhereInput {
  AND: [RatingWhereInput!]
  OR: [RatingWhereInput!]
  NOT: [RatingWhereInput!]
  id: IDFilter
  value: IntNullableFilter
  author: PersonWhereInput
}

input RatingOrderByInput {
  id: OrderDirection
  value: OrderDirection
}

input RatingUpdateInput {
  value: Int
  author: PersonRelateToOneForUpdateInput
}

input RatingUpdateArgs {
  where: RatingWhereUniqueInput!
  data: RatingUpdateInput!
}

input RatingCreateInput {
  value: Int
  author: PersonRelateToOneForCreateInput
}

type StockUnit {
  id: ID!
  quantity: Int
  quantityVariations(
    where: StockUnitQuantityWhereInput! = {}
    orderBy: [StockUnitQuantityOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StockUnitQuantity!]
  quantityVariationsCount(where: StockUnitQuantityWhereInput! = {}): Int
  article: Article
  storage: Storage
  offers(
    where: OfferWhereInput! = {}
    orderBy: [OfferOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Offer!]
  offersCount(where: OfferWhereInput! = {}): Int
}

input StockUnitWhereUniqueInput {
  id: ID
}

input StockUnitWhereInput {
  AND: [StockUnitWhereInput!]
  OR: [StockUnitWhereInput!]
  NOT: [StockUnitWhereInput!]
  id: IDFilter
  quantity: IntNullableFilter
  quantityVariations: StockUnitQuantityManyRelationFilter
  article: ArticleWhereInput
  storage: StorageWhereInput
  offers: OfferManyRelationFilter
}

input StockUnitQuantityManyRelationFilter {
  every: StockUnitQuantityWhereInput
  some: StockUnitQuantityWhereInput
  none: StockUnitQuantityWhereInput
}

input StockUnitOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
}

input StockUnitUpdateInput {
  quantity: Int
  quantityVariations: StockUnitQuantityRelateToManyForUpdateInput
  article: ArticleRelateToOneForUpdateInput
  storage: StorageRelateToOneForUpdateInput
  offers: OfferRelateToManyForUpdateInput
}

input StockUnitQuantityRelateToManyForUpdateInput {
  disconnect: [StockUnitQuantityWhereUniqueInput!]
  set: [StockUnitQuantityWhereUniqueInput!]
  create: [StockUnitQuantityCreateInput!]
  connect: [StockUnitQuantityWhereUniqueInput!]
}

input StockUnitUpdateArgs {
  where: StockUnitWhereUniqueInput!
  data: StockUnitUpdateInput!
}

input StockUnitCreateInput {
  quantity: Int
  quantityVariations: StockUnitQuantityRelateToManyForCreateInput
  article: ArticleRelateToOneForCreateInput
  storage: StorageRelateToOneForCreateInput
  offers: OfferRelateToManyForCreateInput
}

input StockUnitQuantityRelateToManyForCreateInput {
  create: [StockUnitQuantityCreateInput!]
  connect: [StockUnitQuantityWhereUniqueInput!]
}

type Storage {
  id: ID!
  name: String
  game: Game
  stockUnits(
    where: StockUnitWhereInput! = {}
    orderBy: [StockUnitOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StockUnit!]
  stockUnitsCount(where: StockUnitWhereInput! = {}): Int
  expansions(
    where: ExpansionWhereInput! = {}
    orderBy: [ExpansionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Expansion!]
  expansionsCount(where: ExpansionWhereInput! = {}): Int
  createdAt: DateTime
  createdBy: Person
}

input StorageWhereUniqueInput {
  id: ID
  name: String
}

input StorageWhereInput {
  AND: [StorageWhereInput!]
  OR: [StorageWhereInput!]
  NOT: [StorageWhereInput!]
  id: IDFilter
  name: StringFilter
  game: GameWhereInput
  stockUnits: StockUnitManyRelationFilter
  expansions: ExpansionManyRelationFilter
  createdAt: DateTimeNullableFilter
  createdBy: PersonWhereInput
}

input StorageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input StorageUpdateInput {
  name: String
  game: GameRelateToOneForUpdateInput
  stockUnits: StockUnitRelateToManyForUpdateInput
  expansions: ExpansionRelateToManyForUpdateInput
  createdAt: DateTime
  createdBy: PersonRelateToOneForUpdateInput
}

input StorageUpdateArgs {
  where: StorageWhereUniqueInput!
  data: StorageUpdateInput!
}

input StorageCreateInput {
  name: String
  game: GameRelateToOneForCreateInput
  stockUnits: StockUnitRelateToManyForCreateInput
  expansions: ExpansionRelateToManyForCreateInput
  createdAt: DateTime
  createdBy: PersonRelateToOneForCreateInput
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  profile: Person
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  profile: PersonWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  profile: PersonRelateToOneForUpdateInput
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  profile: PersonRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createAction(data: ActionCreateInput!): Action
  createActions(data: [ActionCreateInput!]!): [Action]
  updateAction(where: ActionWhereUniqueInput!, data: ActionUpdateInput!): Action
  updateActions(data: [ActionUpdateArgs!]!): [Action]
  deleteAction(where: ActionWhereUniqueInput!): Action
  deleteActions(where: [ActionWhereUniqueInput!]!): [Action]
  createArticle(data: ArticleCreateInput!): Article
  createArticles(data: [ArticleCreateInput!]!): [Article]
  updateArticle(
    where: ArticleWhereUniqueInput!
    data: ArticleUpdateInput!
  ): Article
  updateArticles(data: [ArticleUpdateArgs!]!): [Article]
  deleteArticle(where: ArticleWhereUniqueInput!): Article
  deleteArticles(where: [ArticleWhereUniqueInput!]!): [Article]
  createArticleReconciliation(
    data: ArticleReconciliationCreateInput!
  ): ArticleReconciliation
  createArticleReconciliations(
    data: [ArticleReconciliationCreateInput!]!
  ): [ArticleReconciliation]
  updateArticleReconciliation(
    where: ArticleReconciliationWhereUniqueInput!
    data: ArticleReconciliationUpdateInput!
  ): ArticleReconciliation
  updateArticleReconciliations(
    data: [ArticleReconciliationUpdateArgs!]!
  ): [ArticleReconciliation]
  deleteArticleReconciliation(
    where: ArticleReconciliationWhereUniqueInput!
  ): ArticleReconciliation
  deleteArticleReconciliations(
    where: [ArticleReconciliationWhereUniqueInput!]!
  ): [ArticleReconciliation]
  createBatch(data: BatchCreateInput!): Batch
  createBatches(data: [BatchCreateInput!]!): [Batch]
  updateBatch(where: BatchWhereUniqueInput!, data: BatchUpdateInput!): Batch
  updateBatches(data: [BatchUpdateArgs!]!): [Batch]
  deleteBatch(where: BatchWhereUniqueInput!): Batch
  deleteBatches(where: [BatchWhereUniqueInput!]!): [Batch]
  createBatchProd(data: BatchProdCreateInput!): BatchProd
  createBatchProds(data: [BatchProdCreateInput!]!): [BatchProd]
  updateBatchProd(
    where: BatchProdWhereUniqueInput!
    data: BatchProdUpdateInput!
  ): BatchProd
  updateBatchProds(data: [BatchProdUpdateArgs!]!): [BatchProd]
  deleteBatchProd(where: BatchProdWhereUniqueInput!): BatchProd
  deleteBatchProds(where: [BatchProdWhereUniqueInput!]!): [BatchProd]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(
    where: CommentWhereUniqueInput!
    data: CommentUpdateInput!
  ): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  createCondition(data: ConditionCreateInput!): Condition
  createConditions(data: [ConditionCreateInput!]!): [Condition]
  updateCondition(
    where: ConditionWhereUniqueInput!
    data: ConditionUpdateInput!
  ): Condition
  updateConditions(data: [ConditionUpdateArgs!]!): [Condition]
  deleteCondition(where: ConditionWhereUniqueInput!): Condition
  deleteConditions(where: [ConditionWhereUniqueInput!]!): [Condition]
  createControlAction(data: ControlActionCreateInput!): ControlAction
  createControlActions(data: [ControlActionCreateInput!]!): [ControlAction]
  updateControlAction(
    where: ControlActionWhereUniqueInput!
    data: ControlActionUpdateInput!
  ): ControlAction
  updateControlActions(data: [ControlActionUpdateArgs!]!): [ControlAction]
  deleteControlAction(where: ControlActionWhereUniqueInput!): ControlAction
  deleteControlActions(
    where: [ControlActionWhereUniqueInput!]!
  ): [ControlAction]
  createCountry(data: CountryCreateInput!): Country
  createCountries(data: [CountryCreateInput!]!): [Country]
  updateCountry(
    where: CountryWhereUniqueInput!
    data: CountryUpdateInput!
  ): Country
  updateCountries(data: [CountryUpdateArgs!]!): [Country]
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteCountries(where: [CountryWhereUniqueInput!]!): [Country]
  createCountryGroup(data: CountryGroupCreateInput!): CountryGroup
  createCountryGroups(data: [CountryGroupCreateInput!]!): [CountryGroup]
  updateCountryGroup(
    where: CountryGroupWhereUniqueInput!
    data: CountryGroupUpdateInput!
  ): CountryGroup
  updateCountryGroups(data: [CountryGroupUpdateArgs!]!): [CountryGroup]
  deleteCountryGroup(where: CountryGroupWhereUniqueInput!): CountryGroup
  deleteCountryGroups(where: [CountryGroupWhereUniqueInput!]!): [CountryGroup]
  createCurrency(data: CurrencyCreateInput!): Currency
  createCurrencies(data: [CurrencyCreateInput!]!): [Currency]
  updateCurrency(
    where: CurrencyWhereUniqueInput!
    data: CurrencyUpdateInput!
  ): Currency
  updateCurrencies(data: [CurrencyUpdateArgs!]!): [Currency]
  deleteCurrency(where: CurrencyWhereUniqueInput!): Currency
  deleteCurrencies(where: [CurrencyWhereUniqueInput!]!): [Currency]
  createExpansion(data: ExpansionCreateInput!): Expansion
  createExpansions(data: [ExpansionCreateInput!]!): [Expansion]
  updateExpansion(
    where: ExpansionWhereUniqueInput!
    data: ExpansionUpdateInput!
  ): Expansion
  updateExpansions(data: [ExpansionUpdateArgs!]!): [Expansion]
  deleteExpansion(where: ExpansionWhereUniqueInput!): Expansion
  deleteExpansions(where: [ExpansionWhereUniqueInput!]!): [Expansion]
  createExpansionLocal(data: ExpansionLocalCreateInput!): ExpansionLocal
  createExpansionLocals(data: [ExpansionLocalCreateInput!]!): [ExpansionLocal]
  updateExpansionLocal(
    where: ExpansionLocalWhereUniqueInput!
    data: ExpansionLocalUpdateInput!
  ): ExpansionLocal
  updateExpansionLocals(data: [ExpansionLocalUpdateArgs!]!): [ExpansionLocal]
  deleteExpansionLocal(where: ExpansionLocalWhereUniqueInput!): ExpansionLocal
  deleteExpansionLocals(
    where: [ExpansionLocalWhereUniqueInput!]!
  ): [ExpansionLocal]
  createExpansionReconciliation(
    data: ExpansionReconciliationCreateInput!
  ): ExpansionReconciliation
  createExpansionReconciliations(
    data: [ExpansionReconciliationCreateInput!]!
  ): [ExpansionReconciliation]
  updateExpansionReconciliation(
    where: ExpansionReconciliationWhereUniqueInput!
    data: ExpansionReconciliationUpdateInput!
  ): ExpansionReconciliation
  updateExpansionReconciliations(
    data: [ExpansionReconciliationUpdateArgs!]!
  ): [ExpansionReconciliation]
  deleteExpansionReconciliation(
    where: ExpansionReconciliationWhereUniqueInput!
  ): ExpansionReconciliation
  deleteExpansionReconciliations(
    where: [ExpansionReconciliationWhereUniqueInput!]!
  ): [ExpansionReconciliation]
  createGame(data: GameCreateInput!): Game
  createGames(data: [GameCreateInput!]!): [Game]
  updateGame(where: GameWhereUniqueInput!, data: GameUpdateInput!): Game
  updateGames(data: [GameUpdateArgs!]!): [Game]
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteGames(where: [GameWhereUniqueInput!]!): [Game]
  createLanguage(data: LanguageCreateInput!): Language
  createLanguages(data: [LanguageCreateInput!]!): [Language]
  updateLanguage(
    where: LanguageWhereUniqueInput!
    data: LanguageUpdateInput!
  ): Language
  updateLanguages(data: [LanguageUpdateArgs!]!): [Language]
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  deleteLanguages(where: [LanguageWhereUniqueInput!]!): [Language]
  createLink(data: LinkCreateInput!): Link
  createLinks(data: [LinkCreateInput!]!): [Link]
  updateLink(where: LinkWhereUniqueInput!, data: LinkUpdateInput!): Link
  updateLinks(data: [LinkUpdateArgs!]!): [Link]
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteLinks(where: [LinkWhereUniqueInput!]!): [Link]
  createMediaObject(data: MediaObjectCreateInput!): MediaObject
  createMediaObjects(data: [MediaObjectCreateInput!]!): [MediaObject]
  updateMediaObject(
    where: MediaObjectWhereUniqueInput!
    data: MediaObjectUpdateInput!
  ): MediaObject
  updateMediaObjects(data: [MediaObjectUpdateArgs!]!): [MediaObject]
  deleteMediaObject(where: MediaObjectWhereUniqueInput!): MediaObject
  deleteMediaObjects(where: [MediaObjectWhereUniqueInput!]!): [MediaObject]
  createOffer(data: OfferCreateInput!): Offer
  createOffers(data: [OfferCreateInput!]!): [Offer]
  updateOffer(where: OfferWhereUniqueInput!, data: OfferUpdateInput!): Offer
  updateOffers(data: [OfferUpdateArgs!]!): [Offer]
  deleteOffer(where: OfferWhereUniqueInput!): Offer
  deleteOffers(where: [OfferWhereUniqueInput!]!): [Offer]
  createPerson(data: PersonCreateInput!): Person
  createPeople(data: [PersonCreateInput!]!): [Person]
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  updatePeople(data: [PersonUpdateArgs!]!): [Person]
  deletePerson(where: PersonWhereUniqueInput!): Person
  deletePeople(where: [PersonWhereUniqueInput!]!): [Person]
  createPlateform(data: PlateformCreateInput!): Plateform
  createPlateforms(data: [PlateformCreateInput!]!): [Plateform]
  updatePlateform(
    where: PlateformWhereUniqueInput!
    data: PlateformUpdateInput!
  ): Plateform
  updatePlateforms(data: [PlateformUpdateArgs!]!): [Plateform]
  deletePlateform(where: PlateformWhereUniqueInput!): Plateform
  deletePlateforms(where: [PlateformWhereUniqueInput!]!): [Plateform]
  createPrice(data: PriceCreateInput!): Price
  createPrices(data: [PriceCreateInput!]!): [Price]
  updatePrice(where: PriceWhereUniqueInput!, data: PriceUpdateInput!): Price
  updatePrices(data: [PriceUpdateArgs!]!): [Price]
  deletePrice(where: PriceWhereUniqueInput!): Price
  deletePrices(where: [PriceWhereUniqueInput!]!): [Price]
  createPriceOffer(data: PriceOfferCreateInput!): PriceOffer
  createPriceOffers(data: [PriceOfferCreateInput!]!): [PriceOffer]
  updatePriceOffer(
    where: PriceOfferWhereUniqueInput!
    data: PriceOfferUpdateInput!
  ): PriceOffer
  updatePriceOffers(data: [PriceOfferUpdateArgs!]!): [PriceOffer]
  deletePriceOffer(where: PriceOfferWhereUniqueInput!): PriceOffer
  deletePriceOffers(where: [PriceOfferWhereUniqueInput!]!): [PriceOffer]
  createPricing(data: PricingCreateInput!): Pricing
  createPricings(data: [PricingCreateInput!]!): [Pricing]
  updatePricing(
    where: PricingWhereUniqueInput!
    data: PricingUpdateInput!
  ): Pricing
  updatePricings(data: [PricingUpdateArgs!]!): [Pricing]
  deletePricing(where: PricingWhereUniqueInput!): Pricing
  deletePricings(where: [PricingWhereUniqueInput!]!): [Pricing]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductLocal(data: ProductLocalCreateInput!): ProductLocal
  createProductLocals(data: [ProductLocalCreateInput!]!): [ProductLocal]
  updateProductLocal(
    where: ProductLocalWhereUniqueInput!
    data: ProductLocalUpdateInput!
  ): ProductLocal
  updateProductLocals(data: [ProductLocalUpdateArgs!]!): [ProductLocal]
  deleteProductLocal(where: ProductLocalWhereUniqueInput!): ProductLocal
  deleteProductLocals(where: [ProductLocalWhereUniqueInput!]!): [ProductLocal]
  createProductModel(data: ProductModelCreateInput!): ProductModel
  createProductModels(data: [ProductModelCreateInput!]!): [ProductModel]
  updateProductModel(
    where: ProductModelWhereUniqueInput!
    data: ProductModelUpdateInput!
  ): ProductModel
  updateProductModels(data: [ProductModelUpdateArgs!]!): [ProductModel]
  deleteProductModel(where: ProductModelWhereUniqueInput!): ProductModel
  deleteProductModels(where: [ProductModelWhereUniqueInput!]!): [ProductModel]
  createProductReconciliation(
    data: ProductReconciliationCreateInput!
  ): ProductReconciliation
  createProductReconciliations(
    data: [ProductReconciliationCreateInput!]!
  ): [ProductReconciliation]
  updateProductReconciliation(
    where: ProductReconciliationWhereUniqueInput!
    data: ProductReconciliationUpdateInput!
  ): ProductReconciliation
  updateProductReconciliations(
    data: [ProductReconciliationUpdateArgs!]!
  ): [ProductReconciliation]
  deleteProductReconciliation(
    where: ProductReconciliationWhereUniqueInput!
  ): ProductReconciliation
  deleteProductReconciliations(
    where: [ProductReconciliationWhereUniqueInput!]!
  ): [ProductReconciliation]
  createStockUnitQuantity(
    data: StockUnitQuantityCreateInput!
  ): StockUnitQuantity
  createStockUnitQuantities(
    data: [StockUnitQuantityCreateInput!]!
  ): [StockUnitQuantity]
  updateStockUnitQuantity(
    where: StockUnitQuantityWhereUniqueInput!
    data: StockUnitQuantityUpdateInput!
  ): StockUnitQuantity
  updateStockUnitQuantities(
    data: [StockUnitQuantityUpdateArgs!]!
  ): [StockUnitQuantity]
  deleteStockUnitQuantity(
    where: StockUnitQuantityWhereUniqueInput!
  ): StockUnitQuantity
  deleteStockUnitQuantities(
    where: [StockUnitQuantityWhereUniqueInput!]!
  ): [StockUnitQuantity]
  createRarity(data: RarityCreateInput!): Rarity
  createRarities(data: [RarityCreateInput!]!): [Rarity]
  updateRarity(where: RarityWhereUniqueInput!, data: RarityUpdateInput!): Rarity
  updateRarities(data: [RarityUpdateArgs!]!): [Rarity]
  deleteRarity(where: RarityWhereUniqueInput!): Rarity
  deleteRarities(where: [RarityWhereUniqueInput!]!): [Rarity]
  createRating(data: RatingCreateInput!): Rating
  createRatings(data: [RatingCreateInput!]!): [Rating]
  updateRating(where: RatingWhereUniqueInput!, data: RatingUpdateInput!): Rating
  updateRatings(data: [RatingUpdateArgs!]!): [Rating]
  deleteRating(where: RatingWhereUniqueInput!): Rating
  deleteRatings(where: [RatingWhereUniqueInput!]!): [Rating]
  createStockUnit(data: StockUnitCreateInput!): StockUnit
  createStockUnits(data: [StockUnitCreateInput!]!): [StockUnit]
  updateStockUnit(
    where: StockUnitWhereUniqueInput!
    data: StockUnitUpdateInput!
  ): StockUnit
  updateStockUnits(data: [StockUnitUpdateArgs!]!): [StockUnit]
  deleteStockUnit(where: StockUnitWhereUniqueInput!): StockUnit
  deleteStockUnits(where: [StockUnitWhereUniqueInput!]!): [StockUnit]
  createStorage(data: StorageCreateInput!): Storage
  createStorages(data: [StorageCreateInput!]!): [Storage]
  updateStorage(
    where: StorageWhereUniqueInput!
    data: StorageUpdateInput!
  ): Storage
  updateStorages(data: [StorageUpdateArgs!]!): [Storage]
  deleteStorage(where: StorageWhereUniqueInput!): Storage
  deleteStorages(where: [StorageWhereUniqueInput!]!): [Storage]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  upsertArticle(data: UpsertStockUnitInput!, where: ArticleWhereInput!): Article
}

input UpsertStockUnitInput {
  createOrConnect: StockUnitCreateInput!
  update: IntQuantityUpdateOperationsInput!
}

input IntQuantityUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  actions(
    where: ActionWhereInput! = {}
    orderBy: [ActionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Action!]
  action(where: ActionWhereUniqueInput!): Action
  actionsCount(where: ActionWhereInput! = {}): Int
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  article(where: ArticleWhereUniqueInput!): Article
  articlesCount(where: ArticleWhereInput! = {}): Int
  articleReconciliations(
    where: ArticleReconciliationWhereInput! = {}
    orderBy: [ArticleReconciliationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ArticleReconciliation!]
  articleReconciliation(
    where: ArticleReconciliationWhereUniqueInput!
  ): ArticleReconciliation
  articleReconciliationsCount(where: ArticleReconciliationWhereInput! = {}): Int
  batches(
    where: BatchWhereInput! = {}
    orderBy: [BatchOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Batch!]
  batch(where: BatchWhereUniqueInput!): Batch
  batchesCount(where: BatchWhereInput! = {}): Int
  batchProds(
    where: BatchProdWhereInput! = {}
    orderBy: [BatchProdOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [BatchProd!]
  batchProd(where: BatchProdWhereUniqueInput!): BatchProd
  batchProdsCount(where: BatchProdWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  comment(where: CommentWhereUniqueInput!): Comment
  commentsCount(where: CommentWhereInput! = {}): Int
  conditions(
    where: ConditionWhereInput! = {}
    orderBy: [ConditionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Condition!]
  condition(where: ConditionWhereUniqueInput!): Condition
  conditionsCount(where: ConditionWhereInput! = {}): Int
  controlActions(
    where: ControlActionWhereInput! = {}
    orderBy: [ControlActionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ControlAction!]
  controlAction(where: ControlActionWhereUniqueInput!): ControlAction
  controlActionsCount(where: ControlActionWhereInput! = {}): Int
  countries(
    where: CountryWhereInput! = {}
    orderBy: [CountryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Country!]
  country(where: CountryWhereUniqueInput!): Country
  countriesCount(where: CountryWhereInput! = {}): Int
  countryGroups(
    where: CountryGroupWhereInput! = {}
    orderBy: [CountryGroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CountryGroup!]
  countryGroup(where: CountryGroupWhereUniqueInput!): CountryGroup
  countryGroupsCount(where: CountryGroupWhereInput! = {}): Int
  currencies(
    where: CurrencyWhereInput! = {}
    orderBy: [CurrencyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Currency!]
  currency(where: CurrencyWhereUniqueInput!): Currency
  currenciesCount(where: CurrencyWhereInput! = {}): Int
  expansions(
    where: ExpansionWhereInput! = {}
    orderBy: [ExpansionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Expansion!]
  expansion(where: ExpansionWhereUniqueInput!): Expansion
  expansionsCount(where: ExpansionWhereInput! = {}): Int
  expansionLocals(
    where: ExpansionLocalWhereInput! = {}
    orderBy: [ExpansionLocalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ExpansionLocal!]
  expansionLocal(where: ExpansionLocalWhereUniqueInput!): ExpansionLocal
  expansionLocalsCount(where: ExpansionLocalWhereInput! = {}): Int
  expansionReconciliations(
    where: ExpansionReconciliationWhereInput! = {}
    orderBy: [ExpansionReconciliationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ExpansionReconciliation!]
  expansionReconciliation(
    where: ExpansionReconciliationWhereUniqueInput!
  ): ExpansionReconciliation
  expansionReconciliationsCount(
    where: ExpansionReconciliationWhereInput! = {}
  ): Int
  games(
    where: GameWhereInput! = {}
    orderBy: [GameOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Game!]
  game(where: GameWhereUniqueInput!): Game
  gamesCount(where: GameWhereInput! = {}): Int
  languages(
    where: LanguageWhereInput! = {}
    orderBy: [LanguageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Language!]
  language(where: LanguageWhereUniqueInput!): Language
  languagesCount(where: LanguageWhereInput! = {}): Int
  links(
    where: LinkWhereInput! = {}
    orderBy: [LinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Link!]
  link(where: LinkWhereUniqueInput!): Link
  linksCount(where: LinkWhereInput! = {}): Int
  mediaObjects(
    where: MediaObjectWhereInput! = {}
    orderBy: [MediaObjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MediaObject!]
  mediaObject(where: MediaObjectWhereUniqueInput!): MediaObject
  mediaObjectsCount(where: MediaObjectWhereInput! = {}): Int
  offers(
    where: OfferWhereInput! = {}
    orderBy: [OfferOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Offer!]
  offer(where: OfferWhereUniqueInput!): Offer
  offersCount(where: OfferWhereInput! = {}): Int
  people(
    where: PersonWhereInput! = {}
    orderBy: [PersonOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Person!]
  person(where: PersonWhereUniqueInput!): Person
  peopleCount(where: PersonWhereInput! = {}): Int
  plateforms(
    where: PlateformWhereInput! = {}
    orderBy: [PlateformOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Plateform!]
  plateform(where: PlateformWhereUniqueInput!): Plateform
  plateformsCount(where: PlateformWhereInput! = {}): Int
  prices(
    where: PriceWhereInput! = {}
    orderBy: [PriceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Price!]
  price(where: PriceWhereUniqueInput!): Price
  pricesCount(where: PriceWhereInput! = {}): Int
  priceOffers(
    where: PriceOfferWhereInput! = {}
    orderBy: [PriceOfferOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PriceOffer!]
  priceOffer(where: PriceOfferWhereUniqueInput!): PriceOffer
  priceOffersCount(where: PriceOfferWhereInput! = {}): Int
  pricings(
    where: PricingWhereInput! = {}
    orderBy: [PricingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pricing!]
  pricing(where: PricingWhereUniqueInput!): Pricing
  pricingsCount(where: PricingWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productLocals(
    where: ProductLocalWhereInput! = {}
    orderBy: [ProductLocalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductLocal!]
  productLocal(where: ProductLocalWhereUniqueInput!): ProductLocal
  productLocalsCount(where: ProductLocalWhereInput! = {}): Int
  productModels(
    where: ProductModelWhereInput! = {}
    orderBy: [ProductModelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductModel!]
  productModel(where: ProductModelWhereUniqueInput!): ProductModel
  productModelsCount(where: ProductModelWhereInput! = {}): Int
  productReconciliations(
    where: ProductReconciliationWhereInput! = {}
    orderBy: [ProductReconciliationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductReconciliation!]
  productReconciliation(
    where: ProductReconciliationWhereUniqueInput!
  ): ProductReconciliation
  productReconciliationsCount(where: ProductReconciliationWhereInput! = {}): Int
  stockUnitQuantities(
    where: StockUnitQuantityWhereInput! = {}
    orderBy: [StockUnitQuantityOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StockUnitQuantity!]
  stockUnitQuantity(
    where: StockUnitQuantityWhereUniqueInput!
  ): StockUnitQuantity
  stockUnitQuantitiesCount(where: StockUnitQuantityWhereInput! = {}): Int
  rarities(
    where: RarityWhereInput! = {}
    orderBy: [RarityOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rarity!]
  rarity(where: RarityWhereUniqueInput!): Rarity
  raritiesCount(where: RarityWhereInput! = {}): Int
  ratings(
    where: RatingWhereInput! = {}
    orderBy: [RatingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rating!]
  rating(where: RatingWhereUniqueInput!): Rating
  ratingsCount(where: RatingWhereInput! = {}): Int
  stockUnits(
    where: StockUnitWhereInput! = {}
    orderBy: [StockUnitOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StockUnit!]
  stockUnit(where: StockUnitWhereUniqueInput!): StockUnit
  stockUnitsCount(where: StockUnitWhereInput! = {}): Int
  storages(
    where: StorageWhereInput! = {}
    orderBy: [StorageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Storage!]
  storage(where: StorageWhereUniqueInput!): Storage
  storagesCount(where: StorageWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
